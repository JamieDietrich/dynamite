import math
import numpy as np
import scipy.stats as spst
import scipy.optimize as spopt
import matplotlib.pyplot as plt
import matplotlib.patches as mpatch
import matplotlib.ticker as mticker
import scipy.interpolate as spinter
from mrexo import predict_from_measurement as pfm

class dynamite:

    def __init__(self):
        """Runs the script"""

        self.G = 6.67e-8
        self.M_sun = 2e33
        self.R_sun = 7e10
        self.M_earth = 5.97e27
        self.R_earth = 6.378e8
        self.AU = 1.5e13
        self.seconds_per_day = 86400

        np.random.seed(1)

        m_s, r_s = np.loadtxt("/home/jeremy/Data/Research/EDENData/MR_FGKM.txt", unpack=True)
        f = spinter.interp1d(r_s, m_s)

        targets_dict = {
            "TOI 561"   :([0.856, 0.014, 0.836, 0.033], [89.44, 2.634, 10.78], [84.4, 1.515, 0.447], [89.76, 2.141, 16.309]),
            "TOI 431"   :([0.751, 0.015, 0.793, 0.042], [80.6, 1.33, 0.49], [89.59, 3.28, 12.461]),
            "TOI 1238"  :([0.623, 0.018, 0.607, 0.020], [('get_arccos', (0.49, 3.294)), 2.29, 3.294], [('get_arccos', (0.3, 0.765)), 1.28, 0.765]),
            "TOI 732"   :([0.373, 0.009, 0.374, 0.016], [('get_arccos', (0.69, 0.768)), 1.134, 0.768], [('get_arccos', (0.35, 12.254)), 1.785, 12.254]),
            "TOI 696"   :([0.346, 0.015, 0.344, 0.025], [85.9, 0.899, 0.86], [89.12, 1.289, 14.776]),
            "TOI 736"   :([0.172, 0.004, 0.141, 0.005], [87.3, 1.12, 0.948], [89.55, 2.31, 4.99]),
            #"TOI 171"   :([1.09, 0.042, 0.909, 0.068], [('get_arccos', (0.2, 1.239)), 14.769, 1.239], [('get_arccos', (0.96, 1.814)), 14.733, 1.814]),     # planets are gas giants
            "TOI 1346"  :([0.774, 0.020, 0.819, 0.097], [('get_arccos', (0.5, 1.762)), 1.979, 1.762], [('get_arccos', (0.5, 5.503)), 2.061, 5.503]),
            "TOI 797"   :([0.477, 0.017, 0.471, 0.020], [('get_arccos', (0.48, 1.801)), 1.269, 1.801], [('get_arccos', (0.38, 4.14)), 1.406, 4.14]),
            "TOI 713"   :([0.686, 0.047, 0.670, 0.085], [('get_arccos', (0.27, 1.872)), 1.144, 1.872], [('get_arccos', (0.04, 36)), 2.445, 36]),
            "TOI 1468"  :([0.369, 0.011, 0.356, 0.020], [('get_arccos', (0.04, 1.88)), 1.452, 1.88], [('get_arccos', (0.73, 7.77)), 2.333, 7.77]),
            "TOI 1730"  :([0.532, 0.016, 0.529, 0.020], [('get_arccos', (0.5, 2.156)), 1.441, 2.156], [('get_arccos', (0.5, 6.222)), 2.299, 6.222]),
            "TOI 175"   :([0.319, 0.003, 0.302, 0.008], [88.7, 0.8, 2.253], [89.3, 1.35, 3.691], [88.5, 1.57, 7.451]),
            "TOI 1449"  :([0.568, 0.011, 0.590, 0.018], [('get_arccos', (0.31, 2.369)), 1.625, 2.369], [('get_arccos', (0.99, 24.71)), 4.756, 24.71]),
            "TOI 663"   :([0.493, 0.014, 0.500, 0.016], [89.15, 2.062, 2.599], [89.26, 2.197, 4.699]),
            "TOI 1469"  :([0.772, 0.041, 0.816, 0.063], [85.058, 1.602, 3.093], [87.28, 1.511, 6.765]),
            #"TOI 1469"  :([0.772, 0.041, 0.816, 0.063], [85.058, 1.602, 3.093], [87.28, 1.511, 6.765], [('get_arccos', (0.5, 12.5)), 1.55, 12.5]),     # additional testing
            #"TOI 1469"  :([0.772, 0.041, 0.816, 0.063], [85.058, 1.602, 3.093], [87.28, 1.511, 6.765], [('get_arccos', (0.5, 12.5)), 1.55, 12.5], [75, round(pfm(measurement=7.3, predict="Radius", dataset="kepler")[0], 3), 22.717]),        # additional testing
            #"TOI 1469"  :([0.772, 0.041, 0.816, 0.063], [85.058, 1.602, 3.093], [87.28, 1.511, 6.765], [('get_arccos', (0.5, 12.5)), 1.55, 12.5], [75, round(pfm(measurement=7.3, predict="Radius", dataset="kepler")[0], 3), 22.717], [75, round(pfm(measurement=16.17, predict="Radius", dataset="kepler")[0], 3), 46.859]),     # additional testing
            "TOI 1260"  :([0.693, 0.069, 0.660, 0.083], [('get_arccos', (0.27, 3.127)), 2.401, 3.127], [('get_arccos', (0.02, 7.491)), 2.676, 7.491]),
            "TOI 270"   :([0.375, 0.010, 0.359, 0.017], [88.65, 1.247, 3.36], [89.53, 2.42, 5.66], [89.69, 2.13, 11.38]),
            "TOI 261"   :([1.19, 0.022, 0.999, 0.083],  [88, 2.466, 3.362], [89.255, 2.881, 13.039]),
            "TOI 396"   :([1.29, 0.026, 1.09, 0.108],   [87.67, 1.981, 3.586], [86.135, 2.373, 5.972]),
            "TOI 256"   :([0.216, 0.007, 0.185, 0.020], [89.92, 1.282, 3.778], [89.89, 1.727, 24.737]),
            "TOI 1233"  :([0.852, 0.022, 0.909, 0.062], [('get_arccos', (0.34, 14.176)), round(0.215*11.2, 3), 14.176], [('get_arccos', (0.42, 19.593)), round(0.273*11.2, 3), 19.593], [('get_arccos', (0.25, 6.204)), round(0.175*11.2, 3), 6.204], [('get_arccos', (0.43, 3.795)), round(0.123*11.2, 3), 3.795]),
            "TOI 836"   :([0.653, 0.017, 0.665, 0.032], [('get_arccos', (0.22, 3.817)), 1.813, 3.817], [('get_arccos', (0.14, 8.594)), 2.593, 8.594]),
            "TOI 174"   :([0.711, 0.018, 0.762, 0.040], [88.939, 2.125, 17.667], [89.202, 1.826, 29.625], [('get_arccos', (0.51, 12.161)), 1.33, 12.161], [('get_arccos', (0.49, 3.976)), 0.99, 3.976]),
            #"TOI 174"   :([0.711, 0.018, 0.762, 0.040], [88.939, 2.125, 17.667], [89.202, 1.826, 29.625]),     # additional testing
            #"TOI 174"   :([0.711, 0.018, 0.762, 0.040], [('get_arccos', (0.51, 12.161)), 1.33, 12.161], [89.202, 1.826, 29.625]),      # additional testing
            #"TOI 174"   :([0.711, 0.018, 0.762, 0.040], [('get_arccos', (0.49, 3.976)), 0.99, 3.976], [89.202, 1.826, 29.625]),        # additional testing
            #"TOI 174"   :([0.711, 0.018, 0.762, 0.040], [('get_arccos', (0.49, 3.976)), 0.99, 3.976], [88.939, 2.125, 17.667]),        # additional testing
            #"TOI 174"   :([0.711, 0.018, 0.762, 0.040], [88.939, 2.125, 17.667+(np.random.rand()*2-1)*0.1], [89.202, 1.826, 29.625+(np.random.rand()*2-1)*0.2], [('get_arccos', (0.5, 4)), 0.99, 3.976+(np.random.rand()*2-1)*0.03]),      # additional testing
            "TOI 411"   :([1.13, 0.049, 1.17, 0.162],   [('get_arccos', (0.69, 4.04)), 1.567, 4.04], [('get_arccos', (0.42, 9.572)), 2.318, 9.572]),
            #"TOI 1130"  :([0.712, 0.041, 0.660, 0.076], [('get_arccos', (0.5, 4.067)), 3.516, 4.067], [('get_arccos', (0.5, 8.35)), 8.973, 8.35]),     # one planet is a gas giant
            "TOI 1269"  :([0.849, 0.045, 0.969, 0.129], [('get_arccos', (0.36, 4.253)), 2.66, 4.253], [('get_arccos', (0.65, 9.239)), 2.316, 9.239]),
            "TOI 1246"  :([0.893, 0.028, 0.922, 0.052], [('get_arccos', (0.6, 4.308)), 3, 4.308], [('get_arccos', (0.18, 18.654)), 3.33, 18.654], [('get_arccos', (0.12, 5.903)), 2.63, 5.903]),
            "TOI 1453"  :([0.710, 0.048, 0.810, 0.096], [('get_arccos', (0.5, 4.313)), 1.211, 4.313], [('get_arccos', (0.5, 6.589)), 2.289, 6.589]),
            "TOI 714"   :([0.473, 0.014, 0.471, 0.020], [('get_arccos', (0.86, 4.323)), 3.509, 4.323], [('get_arccos', (0.7, 10.177)), 3.215, 10.177]),
            "TOI 1749"  :([0.561, 0.017, 0.555, 0.020], [('get_arccos', (0.5, 4.489)), 2.106, 4.489], [('get_arccos', (0.5, 9.046)), 2.502, 9.046]),
            "TOI 286"   :([0.789, 0.011, 0.835, 0.018], [('get_arccos', (0.32, 4.513)), 1.33, 4.513], [('get_arccos', (0.29, 39.361)), 1.974, 39.361]),
            "TOI 125"   :([0.883, 0.002, 0.900, 0.020], [88.83, 2.914, 19.98], [88.66, 2.713, 9.151], [89.11, 2.699, 4.654]),
            "TOI 402"   :([0.840, 0.013, 0.874, 0.038], [88.5, 1.64, 4.756], [88.5, 2.39, 17.178]),
            "TOI 1438"  :([0.816, 0.046, 0.900, 0.112], [('get_arccos', (0.01, 5.14)), 2.813, 5.14], [('get_arccos', (0.5, 9.427)), 2.319, 9.427]),
            "TOI 119"   :([0.800, 0.011, 0.840, 0.034], [89.28, 1.844, 10.691], [89.21, 1.995, 5.541]),
            "TOI 763"   :([0.907, 0.047, 0.970, 0.115], [('get_arccos', (0.2, 5.605)), 3.112, 5.605], [('get_arccos', (0.6, 12.276)), 3.705, 12.276]),
            #"TOI 201"   :([1.32, 0.066, 1.07, 0.136],   [('get_arccos', (0.5, 5.849)), 1.764, 5.849], [88.54, 8.519, 52.978]),     # one planet is a gas giant
            "TOI 1136"  :([0.968, 0.017, 0.966, 0.077], [('get_arccos', (0.16, 12.518)), 4.56, 12.518], [('get_arccos', (0.44, 6.258)), 2.93, 6.258], [('get_arccos', (0.49, 26.322)), 4.04, 26.322]),
            "TOI 1064"  :([0.737, 0.057, 0.740, 0.085], [('get_arccos', (0.04, 6.442)), 2.74, 6.442], [('get_arccos', (0.3, 12.226)), 2.87, 12.226]),
            "TOI 266"   :([0.944, 0.016, 0.964, 0.054], [89.135, 2.353, 6.544], [88.15, 2.628, 10.749]),
            "TOI 178"   :([0.672, 0.061, 0.680, 0.080], [('get_arccos', (0.5, 6.558)), 2.773, 6.558], [('get_arccos', (0.5, 9.956)), 2.323, 9.956], [('get_arccos', (0.5, 10.354)), 3.751, 10.354]),
            "TOI 1726"  :([0.903, 0.055, 1.01, 0.129],  [('get_arccos', (0.5, 7.108)), 2.159, 7.108], [('get_arccos', (0.5, 20.546)), 2.634, 20.546]),
            "TOI 487"   :([1.18, 0.165, 0.997, 0.077],  [88.3, 2.398, 7.414], [89.2, 2.483, 24.334]),
            "TOI 776"   :([0.526, 0.012, 0.530, 0.015], [89.56, 1.64, 8.24], [90.11, 1.91, 15.66]),
            "TOI 703"   :([0.883, 0.019, 0.922, 0.055], [88.4, 2.634, 8.673], [89.3, 2.668, 45.127]),
            "TOI 1339"  :([0.914, 0.025, 0.927, 0.070], [('get_arccos', (0.32, 8.881)), 3.25, 8.881], [('get_arccos', (0.25, 28.579)), 3.07, 28.579], [('get_arccos', (0.01, 24.644)), 1.74, 24.644]),
            "TOI 712"   :([0.674, 0.011, 0.696, 0.025], [('get_arccos', (0.92, 9.532)), 3.14, 9.532], [('get_arccos', (0.62, 51.705)), 3.78, 51.705], [('get_arccos', (0.02, 53.746)), 3.26, 53.746]),
            "TOI 214"   :([0.802, 0.026, 0.825, 0.053], [('get_arccos', (0.5, 9.696)), 1.004, 9.696], [89.53, 1.93, 18.553]),
            "TOI 700"   :([0.384, 0.009, 0.398, 0.014], [89.048, 2.141, 16.051], [89.851, 1.048, 37.427], [('get_arccos', (0.5, 9.977)), 2.452, 9.977]),
            "TOI 1266"  :([0.436, 0.013, 0.431, 0.020], [('get_arccos', (0.26, 10.896)), 2.412, 10.896], [('get_arccos', (0.24, 18.795)), 1.675, 18.795]),
            "TOI 553"   :([0.866, 0.047, 0.910, 0.111], [('get_arccos', (0.19, 11.928)), 2.282, 11.928], [('get_arccos', (0.5, 14.058)), 2.467, 14.058], [('get_arccos', (0.14, 40.902)), 2.735, 40.902]),
            "TOI 699"   :([1.31, 0.027, 1.16, 0.113],   [88.15, 2.32, 14.801], [88.83, 2.399, 33.631]),
            "TOI 1277"  :([0.858, 0.043, 0.976, 0.122], [('get_arccos', (0.1, 37.074)), 3.549, 37.074], [('get_arccos', (0.01, 14.86)), 3.229, 14.86]),
            #"TOI 216"   :([0.780, 0.013, 0.810, 0.048], [88.41, 7.398, 17.078], [89.546, 10.805, 34.552]),
            "TOI 282"   :([1.41, 0.032, 1.16, 0.152],   [('get_arccos', (0.59, 56.01)), 4.22, 56.01], [('get_arccos', (0.87, 84.245)), 3.52, 84.245], [('get_arccos', (0.58, 22.895)), 2.81, 22.895]),
            "Kepler-11" :([1.065, 0.961],[89.64, round(0.1604*11.2, 3), 10.304], [89.59, round(0.2558*11.2, 3), 13.024], [89.67, round(0.2781*11.2, 3), 22.685], [88.89, round(0.3734*11.2, 3), 32], [89.47, round(0.2219*11.2, 3), 46.689], [89.87, round(0.2967*11.2, 3), 118.381]),
            "Kepler-80" :([0.678, 0.730],[89.34, round(0.238*11.2, 3), 7.052], [89.33, round(0.244*11.2, 3), 9.524], [88.35, round(0.136*11.2, 3), 3.072], [88.79, round(0.143*11.2, 3), 4.645], [86.5, round(0.108*11.2, 3), 0.987], [89.35, round(0.101*11.2, 3), 14.646]),
            #"Kepler-20" :([0.93, 0.03, 0.95, 0.08],[86.5, round(0.17*11.2, 3), 3.696], [88.39, round(0.274*11.2, 3), 10.854], [89.57, round(0.245*11.2, 3), 77.612], [87.5, round(0.0774*11.2, 3), 6.098], [88.68, round(0.092*11.2, 3), 19.577]),     # additional testing
            "Kepler-20" :([0.93, 0.03, 0.95, 0.08], [88.39, round(0.274*11.2, 3), 10.854], [89.57, round(0.245*11.2, 3), 77.612], [87.5, round(0.0774*11.2, 3), 6.098], [88.68, round(0.092*11.2, 3), 19.577]),
            "Kepler-32" :([0.54, 0.57],  [('get_arccos', (0.25, 0.743)), 0.8, 0.743], [('get_arccos', (0.35, 2.896)), 1.1, 2.896], [('get_arccos', (0.08, 5.901)), 2.1, 5.901], [('get_arccos', (0.83, 8.752)), 2.22, 8.752], [('get_arccos', (0.12, 22.781)), 2.39, 22.781]),
            "Kepler-33" :([1.82, 1.291], [86.39, round(0.155*11.2, 3), 5.668], [88.19, round(0.285*11.2, 3), 13.176], [88.71, round(0.477*11.2, 3), 21.776], [88.94, round(0.359*11.2, 3), 31.784], [89.17, round(0.398*11.2, 3), 41.029]),
            "Kepler-55" :([0.68, 0.72],  [('get_arccos', (0.02, 2.211)), 1.59, 2.211], [('get_arccos', (0.72, 4.618)), 1.55, 4.618], [('get_arccos', (0.46, 10.199)), 1.59, 10.199], [('get_arccos', (0.32, 27.953)), 2.16, 27.953], [('get_arccos', (0.07, 42.143)), 2.07, 42.143]),
            "Kepler-62" :([0.64, 0.69],  [89.2, 1.31, 5.715], [89.7, 0.54, 12.442], [89.7, 1.95, 18.164], [89.98, 1.61, 122.387], [89.9, 1.41, 267.29]),
            "Kepler-62" :([0.64, 0.69],  [89.2, 1.31, 5.715], [89.7, 0.54, 12.442], [89.7, 1.95, 18.164], [89.98, 1.61, 122.387], [89.9, 1.41, 267.29]),
            "Kepler-84" :([1.11, 1.06],  [('get_arccos', (0.02, 4.225)), 1.38, 4.225], [('get_arccos', (0.35, 8.726)), 2.47, 8.726], [('get_arccos', (0.8, 12.883)), 2.76, 12.883], [('get_arccos', (0.09, 27.434)), 2.6, 27.434], [('get_arccos', (0.34, 44.552)), 2.2, 44.552]),
            "Kepler-102":([0.74, 0.8],   [85.37, 0.47, 5.287], [87.09, 0.58, 7.071], [87.09, 1.18, 10.312], [87.66, 2.22, 16.146], [88.24, 0.88, 27.454]),
            #"Kepler-154":([0.96, 0.03, 1.08, 0.12],  [('get_arccos', (0.92, 3.933)), 1.78, 3.933], [('get_arccos', (0.5, 9.919)), 1.5, 9.919], [('get_arccos', (0.77, 20.55)), 4.12, 20.55], [('get_arccos', (0.37, 33.041)), 2.26, 33.041], [('get_arccos', (0.7, 62.303)), 2.95, 62.303]),       # additional testing
            "Kepler-154":([0.96, 0.03, 1.08, 0.12],  [('get_arccos', (0.92, 3.933)), 1.78, 3.933], [('get_arccos', (0.77, 20.55)), 4.12, 20.55], [('get_arccos', (0.37, 33.041)), 2.26, 33.041], [('get_arccos', (0.7, 62.303)), 2.95, 62.303]),
            "Kepler-169":([0.78, 0.84],  [('get_arccos', (0.47, 3.251)), 1.13, 3.251], [('get_arccos', (0.04, 6.195)), 1.21, 6.195], [('get_arccos', (0.04, 8.348)), 1.25, 8.348], [('get_arccos', (0.11, 13.767)), 2.2, 13.767], [('get_arccos', (0.56, 87.09)), 2.58, 87.09]),
            "Kepler-186":([0.523, 0.544],[83.65, 1.08, 3.887], [85.94, 1.25, 7.267], [87.09, 1.39, 13.343], [88.24, 1.33, 22.408], [89.9, 1.17, 129.944]),                          
            "Kepler-238":([1.26, 1.06],  [('get_arccos', (0.78, 2.091)), 1.73, 2.091], [('get_arccos', (0.06, 6.156)), 2.39, 6.156], [('get_arccos', (0.43, 13.234)), 3.07, 13.234], [('get_arccos', (0.14, 23.654)), 8.26, 23.654], [('get_arccos', (0.21, 50.444)), 2.76, 50.444]),
            "Kepler-292":([0.81, 0.85],  [('get_arccos', (0.09, 2.581)), 1.32, 2.581], [('get_arccos', (0.38, 3.715)), 1.47, 3.715], [('get_arccos', (0.35, 7.056)), 2.23, 7.056], [('get_arccos', (0.91, 11.979)), 2.67, 11.979], [('get_arccos', (0.46, 20.834)), 2.35, 20.834]),
            "Kepler-296":([0.37, 0.38],  [('get_arccos', (0, 3.621)), 0.94, 3.621], [('get_arccos', (0.54, 5.842)), 2.15, 5.842], [('get_arccos', (0.65, 19.85)), 2.28, 19.85], [('get_arccos', (0.49, 34.142)), 1.75, 34.142], [('get_arccos', (0.27, 63.336)), 1.79, 63.336]),
            "Kepler-444":([0.758, 0.752],[88, 0.4, 3.6], [88.2, 0.497, 4.546], [88.16, 0.53, 6.189], [89.13, 0.546, 7.743], [87.96, 0.741, 9.740]),
            "Kepler-24" :([1.11, 0.98],  [('get_arccos', (0.29, 4.244)), 1.67, 4.244], [('get_arccos', (0.94, 8.145)), 3.43, 8.145], [('get_arccos', (0.1, 18.998)), 2.78, 18.998], [('get_arccos', (0.07, 25.934)), 2.55, 25.934]),
            "Kepler-26" :([0.6, 0.62],   [('get_arccos', (0.31, 3.544)), 1.07, 3.544], [('get_arccos', (0.11, 12.283)), 2.94, 12.283], [('get_arccos', (0.87, 17.251)), 2.94, 17.251], [('get_arccos', (0.77, 46.828)), 2.41, 46.828]),
            "Kepler-49" :([0.6, 0.63],   [('get_arccos', (0.06, 2.577)), 1.6, 2.577], [('get_arccos', (0.01, 7.204)), 2.35, 7.204], [('get_arccos', (0.11, 10.912)), 2.06, 10.912], [('get_arccos', (0.27, 18.596)), 1.56, 18.596]),
            "Kepler-79" :([1.302, 1.165],[88.78, round(0.31*11.2, 3), 13.485], [89.48, round(0.332*11.2, 3), 27.403], [89.93, round(0.639*11.2, 3), 52.09], [89.13, round(0.311*11.2, 3), 81.066]),
            "Kepler-82" :([0.93, 0.96],  [('get_arccos', (0.05, 2.383)), 1.77, 2.383], [('get_arccos', (0, 5.902)), 2.47, 5.902], [('get_arccos', (0.59, 26.444)), 4.11, 26.444], [('get_arccos', (0.03, 51.532)), 5.64, 51.532]),
            "Kepler-85" :([0.88, 0.92],  [('get_arccos', (0.66, 8.306)), 1.84, 8.306], [('get_arccos', (0.94, 12.513)), 2.28, 12.513], [('get_arccos', (0, 17.913)), 1.2, 17.913], [('get_arccos', (0.2, 25.217)), 1.27, 25.217]),
            "Kepler-89" :([1.61, 1.25],  [89.3, round(0.13*11.2, 3), 3.7], [88.36, round(0.31*11.2, 3), 10.4], [89.871, round(0.83*11.2, 3), 22.3], [89.76, round(0.49*11.2, 3), 54.3]),
            "Kepler-104":([1.03, 1.01],  [('get_arccos', (0.45, 11.428)), 3.1, 11.428], [('get_arccos', (0.77, 23.668)), 3.13, 23.668], [('get_arccos', (0.76, 51.755)), 3.58, 51.755], [('get_arccos', (0.01, 103.625)), 2.07, 103.625]),
            "Kepler-106":([1.05, 1.05],  [('get_arccos', (0.43, 6.165)), 0.83, 6.165], [('get_arccos', (0.47, 13.571)), 2.39, 13.571], [('get_arccos', (0.31, 23.98)), 0.95, 23.98], [('get_arccos', (0.5, 43.844)), 2.62, 43.844]),
            "Kepler-107":([1.447, 1.238],[89.05, 1.536, 3.18], [89.49, 1.597, 4.901], [87.55, 0.86, 7.958], [89.67, 2.903, 14.749]),
            "Kepler-122":([1.15, 1.08],  [('get_arccos', (0, 5.766)), 2.34, 5.766], [('get_arccos', (0.5, 12.466)), 5.87, 12.466], [('get_arccos', (0.01, 21.587)), 2.2, 21.587], [('get_arccos', (0.84, 37.993)), 2.6, 37.993]),
            "Kepler-150":([0.91, 0.94],  [('get_arccos', (0.08, 3.428)), 1.25, 3.428], [('get_arccos', (0.53, 7.382)), 3.69, 7.382], [('get_arccos', (0.12, 12.561)), 2.79, 12.561], [('get_arccos', (0.93, 30.827)), 3.12, 30.827]),
            "Kepler-164":([1.13, 1.09],  [('get_arccos', (0.51, 10.946)), 2.73, 10.946], [('get_arccos', (0.28, 28.987)), 2.45, 28.987], [('get_arccos', (0.97, 94.879)), 4.27, 94.879], [('get_arccos', (0.08, 5.035)), 1.41, 5.035]),
            "Kepler-172":([1.03, 1.00],  [('get_arccos', (0.14, 2.94)), 2.35, 2.94], [('get_arccos', (0.81, 6.389)), 2.86, 6.389], [('get_arccos', (0.05, 14.627)), 2.25, 14.627], [('get_arccos', (0.6, 35.119)), 2.76, 35.119]),
            "Kepler-197":([1.17, 1.01],  [('get_arccos', (0.22, 5.599)), 1.02, 5.599], [('get_arccos', (0.22, 10.35)), 1.23, 10.35], [('get_arccos', (0.66, 15.678)), 1.22, 15.678], [('get_arccos', (0.14, 25.21)), 0.91, 25.21]),
            "Kepler-208":([1.4, 1.16],   [('get_arccos', (0.16, 4.229)), 1.63, 4.229], [('get_arccos', (0.27, 7.467)), 1.39, 7.467], [('get_arccos', (0.11, 11.132)), 1.2, 11.132], [('get_arccos', (0.21, 16.259)), 1.48, 16.259]),
            "Kepler-215":([0.85, 0.94],  [('get_arccos', (0.58, 9.361)), 1.62, 9.361], [('get_arccos', (0.85, 14.667)), 1.77, 14.667], [('get_arccos', (0.15, 30.864)), 2.39, 30.864], [('get_arccos', (0.28, 68.161)), 1.75, 68.161]),
            "Kepler-220":([0.64, 0.65],  [('get_arccos', (0.09, 4.16)), 0.81, 4.16], [('get_arccos', (0.06, 9.034)), 1.57, 9.034], [('get_arccos', (0.14, 28.122)), 0.98, 28.122], [('get_arccos', (0.53, 45.903)), 1.33, 45.903]),
            "Kepler-221":([0.82, 0.87],  [('get_arccos', (0.61, 2.796)), 1.71, 2.796], [('get_arccos', (0.04, 5.691)), 2.93, 5.691], [('get_arccos', (0.36, 10.042)), 2.73, 10.042], [('get_arccos', (0.26, 18.37)), 2.63, 18.37]),
            "Kepler-223":([1.72, 1.125], [90, round(0.267*11.2, 3), 7.384], [90, round(0.307*11.2, 3), 9.846], [87.94, round(0.467*11.2, 3), 14.789], [88, round(0.41*11.2, 3), 19.726]),
            "Kepler-224":([0.71, 0.78],  [('get_arccos', (0.32, 3.133)), 1.39, 3.133], [('get_arccos', (0.85, 5.925)), 3.12, 5.925], [('get_arccos', (0.01, 11.349)), 2.3, 11.349], [('get_arccos', (0.62, 18.644)), 1.97, 18.644]),
            "Kepler-235":([0.53, 0.54],  [('get_arccos', (0.37, 3.34)), 2.23, 3.34], [('get_arccos', (0.24, 7.825)), 1.28, 7.825], [('get_arccos', (0.11, 20.061)), 2.05, 20.061], [('get_arccos', (0.68, 46.184)), 2.22, 46.184]),
            "Kepler-245":([0.8, 0.86],   [('get_arccos', (0.16, 3.22)), 1.75, 3.22], [('get_arccos', (0.2, 7.49)), 2.57, 7.49], [('get_arccos', (0.2, 17.461)), 2.18, 17.461], [('get_arccos', (0.18, 36.277)), 3.03, 36.277]),
            "Kepler-251":([0.91, 0.95],  [('get_arccos', (0.25, 4.791)), 1.33, 4.791], [('get_arccos', (0.2, 16.514)), 2.77, 16.514], [('get_arccos', (0.3, 30.133)), 2.77, 30.133], [('get_arccos', (0.23, 99.64)), 2.77, 99.64]),
            "Kepler-256":([1.14, 0.97],  [('get_arccos', (0.07, 1.62)), 1.59, 1.62], [('get_arccos', (0.16, 3.388)), 2.15, 3.388], [('get_arccos', (0.84, 5.839)), 2.48, 5.839], [('get_arccos', (0.04, 10.682)), 2.35, 10.682]),
            "Kepler-265":([1.03, 0.98],  [('get_arccos', (0.64, 6.846)), 1.86, 6.846], [('get_arccos', (0.34, 17.029)), 2.63, 17.029], [('get_arccos', (0.69, 43.131)), 2.49, 43.131], [('get_arccos', (0.02, 67.831)), 2.59, 67.831]),
            "Kepler-282":([0.89, 0.9],   [('get_arccos', (0.02, 9.221)), 1.01, 9.221], [('get_arccos', (0.07, 13.639)), 1.2, 13.639], [('get_arccos', (0.1, 24.806)), 2.28, 24.806], [('get_arccos', (0.09, 44.347)), 2.57, 44.347]),
            "Kepler-286":([0.91, 0.96],  [('get_arccos', (0.06, 1.796)), 1.24, 1.796], [('get_arccos', (0.2, 3.468)), 1.37, 3.468], [('get_arccos', (0.06, 5.914)), 1.33, 5.914], [('get_arccos', (0.64, 29.221)), 1.77, 29.221]),
            "Kepler-299":([0.96, 0.95],  [('get_arccos', (0.38, 2.927)), 1.32, 2.927], [('get_arccos', (0.95, 6.886)), 2.65, 6.886], [('get_arccos', (0.52, 15.055)), 1.86, 15.055], [('get_arccos', (0.22, 38.285)), 1.87, 38.285]),
            "Kepler-304":([0.73, 0.8],   [('get_arccos', (0.2, 1.499)), 1.04, 1.499], [('get_arccos', (0.42, 3.296)), 2.86, 3.296], [('get_arccos', (0.49, 5.316)), 2.17, 5.316], [('get_arccos', (0.75, 9.653)), 2.75, 9.653]),
            "Kepler-305":([0.79, 0.85],  [('get_arccos', (0.78, 3.205)), 1.9, 3.205], [('get_arccos', (0.17, 5.487)), 2.88, 5.487], [('get_arccos', (0.81, 8.291)), 2.81, 8.291], [('get_arccos', (0.62, 16.739)), 2.71, 16.739]),
            "Kepler-306":([0.74, 0.81],  [('get_arccos', (0.07, 4.646)), 1.52, 4.646], [('get_arccos', (0.83, 7.24)), 2.35, 7.24], [('get_arccos', (0.9, 17.327)), 2.47, 17.327], [('get_arccos', (0.31, 44.841)), 2.27, 44.841]),
            "Kepler-338":([1.78, 1.2],   [('get_arccos', (0.07, 9.341)), 1.5, 9.341], [('get_arccos', (0.14, 13.727)), 2.44, 13.727], [('get_arccos', (0.03, 24.311)), 2.34, 24.311], [('get_arccos', (0.79, 44.431)), 3, 44.431]),
            "Kepler-341":([0.99, 1.00],  [('get_arccos', (1528, 5.196)), 1.18, 5.196], [('get_arccos', (0.21, 8.01)), 1.7, 8.01], [('get_arccos', (0.27, 27.666)), 1.85, 27.666], [('get_arccos', (0.74, 42.473)), 1.99, 42.473]),
            "Kepler-342":([1.34, 1.26],  [('get_arccos', (0.28, 1.644)), 1, 1.644], [('get_arccos', (0.01, 15.17)), 2.25, 15.17], [('get_arccos', (0.12, 26.234)), 1.96, 26.234], [('get_arccos', (0.75, 39.459)), 2.49, 39.459]),
            "Kepler-402":([1.24, 1.15],  [('get_arccos', (0.06, 4.029)), 1.22, 4.029], [('get_arccos', (0.11, 7.031)), 1.25, 7.031], [('get_arccos', (0.11, 8.921)), 1.38, 8.921], [('get_arccos', (0.21, 11.243)), 1.46, 11.243]),
            "Kepler-758":([1.42, 1.16],  [('get_arccos', (0.06, 4.758)), 1.78, 4.758], [('get_arccos', (0.5, 8.193)), 1.85, 8.193], [('get_arccos', (0.42, 12.11)), 2.57, 12.11], [('get_arccos', (0.2, 20.497)), 2.07, 20.497]),
            "Kepler-1388":([0.61, 0.63],  [('get_arccos', (0.2687, 5.536)), 2.26, 5.536], [('get_arccos', (0.6624, 12.285)), 2.59, 12.285], [('get_arccos', (0.0138, 20.957)), 2.86, 20.957], [('get_arccos', (0.9335, 37.633)), 2.46, 37.633]),
            "Kepler-1542":([1.42, 1.16],  [('get_arccos', (0.7916, 2.892)), 0.65, 2.892], [('get_arccos', (0.244, 3.951)), 0.76, 3.951], [('get_arccos', (0.4923, 5.101)), 0.76, 5.101], [('get_arccos', (0.8974, 5.993)), 0.87, 5.993]),
            "Kepler-9"  :([0.98, 1.04],  [('get_arccos', (0.03, 1.593)), 1.55, 1.593], [87.1, 8.2, 19.224], [87.2, 969.8, 29.38]),
            "Kepler-18" :([1.108, 0.972],[84.92, round(0.1784*11.2, 3), 3.505], [87.68, round(0.49*11.2, 3), 7.643], [88.07, round(0.623*11.2, 3), 14.859]),
            "Kepler-23" :([1.57, 1.1],   [('get_arccos', (0.66, 7.107)), 1.69, 7.107], [('get_arccos', (0.93, 10.742)), 3.78, 10.742], [('get_arccos', (0.25, 15.274)), 2.2, 15.274]),
            "Kepler-30" :([0.99, 0.95],  [180-90.179, round(0.348*11.2, 3), 29.334], [180-90.323, round(1.097*11.2, 3), 60.323], [89.841, round(0.895*11.2, 3), 143.344]),
            "Kepler-31" :([1.2, 1.08],   [('get_arccos', (0.82, 20.861)), 6.35, 20.861], [('get_arccos', (0.5, 42.633)), 5.65, 42.633], [('get_arccos', (0.57, 87.649)), 4.56, 87.649]),
            "Kepler-37" :([0.78, 0.83],  [('get_arccos', (0.14, 13.368)), 0.31, 13.368], [('get_arccos', (0.13, 21.302)), 0.73, 21.302], [('get_arccos', (0.34, 39.792)), 1.91, 39.792]),
            "Kepler-42" :([0.17, 0.13],  [('get_arccos', (0.78, 1.214)), 0.78, 1.214], [('get_arccos', (0.92, 0.453)), 0.73, 0.453], [('get_arccos', (0.95, 1.865)), 0.57, 1.865]),
            "Kepler-46" :([0.938, 0.902],[88.55, round(0.151*11.2, 3), 6.767], [89.04, round(0.81*11.2, 3), 33.648], [88.66, round(0.481*11.2, 3), 57.325]),
            "Kepler-47" :([0.936, 0.957],[89.752, round(0.272*11.2, 3), 49.464], [180-90.1925, round(0.415*11.2, 3), 303.227], [180-90.395, round(0.628*11.2, 3), 187.366]),
            "Kepler-48" :([0.86, 0.89],  [('get_arccos', (0.47, 4.778)), 2.07, 4.778], [('get_arccos', (0.21, 9.674)), 2.87, 9.674], [('get_arccos', (0.1, 42.896)), 2.2, 42.896]),
            "Kepler-51" :([1.05, 1.05],  [('get_arccos', (0.27, 45.155)), 7.64, 45.155], [('get_arccos', (0.31, 130.18)), 10.42, 130.18], [('get_arccos', (0.1, 85.315)), 5.48, 85.315]),
            "Kepler-52" :([0.63, 0.66],  [('get_arccos', (0.27, 16.385)), 1.71, 16.385], [('get_arccos', (0.86, 7.877)), 2.34, 7.877], [('get_arccos', (0.76, 36.445)), 1.95, 36.445]),
            "Kepler-53" :([0.97, 0.98],  [('get_arccos', (0.03, 18.649)), 2.81, 18.649], [('get_arccos', (0.81, 9.752)), 2.12, 9.752], [('get_arccos', (0.92, 38.559)), 3.73, 38.559]),
            "Kepler-54" :([0.46, 0.48],  [('get_arccos', (0.79, 8.01)), 2.07, 8.01], [('get_arccos', (0.86, 12.072)), 1.75, 12.072], [('get_arccos', (0.23, 20.996)), 1.53, 20.996]),
            "Kepler-58" :([1.5, 1.33],   [('get_arccos', (0.87, 10.219)), 2.82, 10.219], [('get_arccos', (0.54, 54.156)), 2.66, 54.156], [('get_arccos', (0.9, 40.101)), 2.94, 40.101]),
            "Kepler-60" :([1.28, 1.09],  [('get_arccos', (0.74, 7.133)), 1.7, 7.133], [('get_arccos', (0.64, 8.919)), 1.97, 8.919], [('get_arccos', (0.38, 11.899)), 1.56, 11.899]),
            "Kepler-65" :([1.39, 1.22],  [('get_arccos', (0.1, 5.86)), 2.57, 5.86], [('get_arccos', (0.73, 2.155)), 1.53, 2.155], [('get_arccos', (0.02, 8.131)), 1.5, 8.131]),
            "Kepler-81" :([0.65, 0.69],  [('get_arccos', (0.78, 5.955)), 2.51, 5.955], [('get_arccos', (0.07, 12.04)), 2.01, 12.04], [('get_arccos', (0.71, 20.838)), 1.21, 20.838]),
            "Kepler-83" :([0.56, 0.58],  [('get_arccos', (0.04, 9.77)), 2.53, 9.77], [('get_arccos', (0.37, 5.17)), 1.94, 5.17], [('get_arccos', (0.54, 20.09)), 2.3, 20.09]),
            "Kepler-92" :([1.69, 1.17],  [('get_arccos', (0.54, 13.749)), 3.6, 13.749], [('get_arccos', (0.84, 26.723)), 2.69, 26.723], [('get_arccos', (0.86, 49.357)), 2.25, 49.357]),
            "Kepler-100":([1.5, 1.1],    [('get_arccos', (0.38, 12.816)), 2.25, 12.816], [('get_arccos', (0.87, 6.887)), 1.47, 6.887], [('get_arccos', (0.59, 35.333)), 1.55, 35.333]),
            "Kepler-114":([0.65, 0.71],  [87.66, round(0.112*11.2, 3), 5.189], [88.24, round(0.129*11.2, 3), 8.041], [88.24, round(0.226*11.2, 3), 11.776]),
            "Kepler-124":([0.67, 0.73],  [('get_arccos', (0.23, 13.821)), 1.75, 13.821], [('get_arccos', (0.43, 30.951)), 1.11, 30.951], [('get_arccos', (0.14, 3.41)), 0.73, 3.41]),
            "Kepler-126":([1.35, 1.18],  [('get_arccos', (0.65, 10.496)), 1.52, 10.496], [('get_arccos', (0.14, 100.283)), 2.5, 100.283], [('get_arccos', (0.71, 21.87)), 1.58, 21.87]),
            "Kepler-127":([1.37, 1.25],  [('get_arccos', (0.62, 48.63)), 2.64, 48.63], [('get_arccos', (0.77, 29.393)), 2.66, 29.393], [('get_arccos', (0.49, 14.436)), 1.4, 14.436]),
            "Kepler-130":([1.18, 1.02],  [('get_arccos', (0.11, 27.509)), 2.81, 27.509], [('get_arccos', (0.12, 8.457)), 1.02, 8.457], [('get_arccos', (0.84, 87.518)), 1.64, 87.518]),
            "Kepler-132":([1.1, 1.03],   [('get_arccos', (0.26, 6.178)), 1.21, 6.178], [('get_arccos', (0.08, 6.415)), 1.28, 6.415], [('get_arccos', (0.01, 18.01)), 1.55, 18.01]),
            "Kepler-138":([0.54, 0.57],  [89.5, 0.701, 10.313], [88.5, 1.67, 13.782], [88.8, 1.68, 23.089]),
            "Kepler-142":([1.18, 1.06],  [('get_arccos', (0.37, 4.762)), 2.86, 4.762], [('get_arccos', (0.49, 2.024)), 1.99, 2.024], [('get_arccos', (0.94, 41.809)), 2.16, 41.809]),
            "Kepler-148":([0.81, 0.86],  [('get_arccos', (0.69, 51.847)), 8.91, 51.847], [('get_arccos', (0.48, 4.18)), 3.6, 4.18], [('get_arccos', (0.05, 1.729)), 1.8, 1.729]),
            "Kepler-149":([0.9, 0.92],   [('get_arccos', (0.02, 29.199)), 4.21, 29.199], [('get_arccos', (0.62, 160.018)), 3.96, 160.018], [('get_arccos', (0.62, 55.328)), 1.61, 55.328]),
            "Kepler-157":([1.03, 1.02],  [('get_arccos', (0.5, 7.026)), 1.46, 7.026], [('get_arccos', (0.02, 1.732)), 1.32, 1.732], [('get_arccos', (0.34, 13.541)), 2.24, 13.541]),
            "Kepler-166":([0.83, 0.88],  [('get_arccos', (0.09, 7.65)), 2.27, 7.65], [('get_arccos', (0.04, 1.554)), 1.51, 1.554], [('get_arccos', (0.23, 34.26)), 2.38, 34.26]),
            "Kepler-167":([0.77, 0.726], [89.33, round(0.1441*11.2, 3), 4.393], [89.3, round(0.1381*11.2, 3), 7.406], [89.352, round(0.1065*11.2, 3), 21.804]),
            "Kepler-171":([1.09, 1.07],  [('get_arccos', (0.05, 4.167)), 2.34, 4.167], [('get_arccos', (0.04, 11.463)), 2.56, 11.463], [('get_arccos', (0.58, 39.596)), 1.89, 39.596]),
            "Kepler-174":([0.68, 0.71],  [('get_arccos', (0.22, 13.982)), 1.96, 13.982], [('get_arccos', (0.11, 44.001)), 1.49, 44.001], [('get_arccos', (0.09, 247.354)), 2.19, 247.354]),
            "Kepler-176":([0.83, 0.87],  [('get_arccos', (0.07, 5.433)), 1.43, 5.433], [('get_arccos', (0.47, 12.76)), 2.6, 12.76], [('get_arccos', (0.66, 25.752)), 2.51, 25.752]),
            "Kepler-178":([0.92, 0.94],  [('get_arccos', (0.49, 9.577)), 2.9, 9.577], [('get_arccos', (0.87, 90.679)), 3.95, 90.679], [('get_arccos', (0.37, 20.553)), 2.88, 20.553]),
            "Kepler-184":([0.96, 0.97],  [('get_arccos', (0.2, 10.688)), 2.36, 10.688], [('get_arccos', (0.04, 20.303)), 1.97, 20.303], [('get_arccos', (0.89, 29.022)), 2.49, 29.022]),
            "Kepler-191":([0.8, 0.84],   [('get_arccos', (0.12, 5.945)), 2.17, 5.945], [('get_arccos', (0.14, 17.739)), 1.86, 17.739], [('get_arccos', (0.14, 9.94)), 1.34, 9.94]),
            "Kepler-192":([0.94, 0.94],  [('get_arccos', (0.5, 6.47)), 1.02, 6.47], [('get_arccos', (0.38, 9.927)), 2.74, 9.927], [('get_arccos', (0.82, 21.223)), 2.79, 21.223]),
            "Kepler-194":([1.11, 1.09],  [('get_arccos', (0.08, 17.308)), 2.59, 17.308], [('get_arccos', (0.13, 2.092)), 1.51, 2.092], [('get_arccos', (0.18, 52.815)), 2.4, 52.815]),
            "Kepler-198":([0.93, 0.97],  [('get_arccos', (0.5, 1.312)), 1.53, 1.312], [('get_arccos', (0.03, 17.79)), 2.82, 17.79], [('get_arccos', (0.4, 49.567)), 2.47, 49.567]),
            "Kepler-203":([1.03, 1.00],  [('get_arccos', (0.52, 3.163)), 2.57, 3.163], [('get_arccos', (0.1, 5.371)), 2.47, 5.371], [('get_arccos', (0.34, 11.33)), 1.44, 11.33]),
            "Kepler-206":([1.12, 1.05],  [('get_arccos', (0.35, 13.137)), 1.77, 13.137], [('get_arccos', (0.33, 7.782)), 1.2, 7.782], [('get_arccos', (0.1, 23.443)), 1.19, 23.443]),
            "Kepler-207":([1.12, 1.05],  [('get_arccos', (0.38, 1.612)), 1.57, 1.612], [('get_arccos', (0.18, 3.072)), 1.5, 3.072], [('get_arccos', (0.27, 5.868)), 3.31, 5.868]),
            "Kepler-217":([1.76, 1.37],  [('get_arccos', (0.02, 5.375)), 2.23, 5.375], [('get_arccos', (0.37, 8.586)), 1.85, 8.586], [('get_arccos', (0.08, 3.887)), 1.4, 3.887]),
            "Kepler-218":([1.02, 1.01],  [('get_arccos', (0.52, 44.7)), 3.14, 44.7], [('get_arccos', (0.09, 3.619)), 1.48, 3.619], [('get_arccos', (0.94, 124.523)), 4.13, 124.523]),
            "Kepler-219":([1.43, 1.16],  [('get_arccos', (0.03, 4.586)), 2.95, 4.586], [('get_arccos', (0.01, 22.715)), 3.58, 22.715], [('get_arccos', (0.06, 47.904)), 2.81, 47.904]),
            "Kepler-222":([0.84, 0.88],  [('get_arccos', (0.57, 3.937)), 3.16, 3.937], [('get_arccos', (0.9, 10.089)), 4.64, 10.089], [('get_arccos', (0.44, 28.082)), 3.69, 28.082]),
            "Kepler-226":([0.84, 0.88],  [('get_arccos', (0.15, 3.941)), 1.55, 3.941], [('get_arccos', (0.25, 5.35)), 2.27, 5.35], [('get_arccos', (0.06, 8.109)), 1.22, 8.109]),
            "Kepler-228":([0.92, 0.95],  [('get_arccos', (0.45, 2.567)), 1.53, 2.567], [('get_arccos', (0.15, 4.134)), 2.7, 4.134], [('get_arccos', (0.46, 11.094)), 4.04, 11.094]),
            "Kepler-229":([0.76, 0.8],   [('get_arccos', (0.11, 6.253)), 2.2, 6.253], [90, 4.92, 16.069], [('get_arccos', (0.8, 41.195)), 3.85, 41.195]),
            "Kepler-244":([0.79, 0.82],  [('get_arccos', (0.52, 4.312)), 2.76, 4.312], [('get_arccos', (0.49, 9.767)), 2.05, 9.767], [('get_arccos', (0.11, 20.05)), 2.31, 20.05]),
            "Kepler-247":([0.8, 0.84],   [('get_arccos', (0.14, 9.439)), 4.09, 9.439], [('get_arccos', (0.13, 20.478)), 3.94, 20.478], [('get_arccos', (0.14, 3.336)), 1.64, 3.336]),
            "Kepler-249":([0.38, 0.4],   [('get_arccos', (0.26, 3.307)), 1.09, 3.307], [('get_arccos', (0.79, 7.114)), 1.51, 7.114], [('get_arccos', (0.9, 15.368)), 1.57, 15.368]),
            "Kepler-250":([0.79, 0.83],  [('get_arccos', (0.75, 4.148)), 1.13, 4.148], [('get_arccos', (0.05, 7.157)), 2.28, 7.157], [('get_arccos', (0.02, 17.648)), 2.18, 17.648]),
            "Kepler-253":([0.81, 0.85],  [('get_arccos', (0.27, 3.784)), 1.63, 3.784], [('get_arccos', (0.49, 10.282)), 2.65, 10.282], [('get_arccos', (0.65, 18.12)), 3.17, 18.12]),
            "Kepler-254":([0.9, 0.93],   [('get_arccos', (0.74, 5.827)), 3.87, 5.827], [('get_arccos', (0.05, 12.412)), 2.15, 12.412], [('get_arccos', (0.15, 18.746)), 2.5, 18.746]),
            "Kepler-255":([0.86, 0.9],   [('get_arccos', (0.01, 5.715)), 1.55, 5.715], [('get_arccos', (0.33, 9.946)), 2.99, 9.946], [('get_arccos', (0.14, 1.046)), 1.38, 1.046]),
            "Kepler-257":([0.81, 0.85],  [('get_arccos', (0.09, 2.383)), 2.61, 2.383], [('get_arccos', (0.76, 6.581)), 5.41, 6.581], [('get_arccos', (0.13, 24.665)), 4.95, 24.665]),
            "Kepler-267":([0.54, 0.56],  [('get_arccos', (0.22, 3.354)), 1.98, 3.354], [('get_arccos', (0.19, 6.877)), 2.13, 6.877], [('get_arccos', (0.48, 28.465)), 2.27, 28.465]),
            "Kepler-271":([0.87, 0.9],   [('get_arccos', (0.5, 5.25)), 0.66, 5.25], [('get_arccos', (0.2, 7.411)), 1, 7.411], [('get_arccos', (0.1, 10.435)), 1.23, 10.435]),
            "Kepler-272":([0.95, 0.97],  [('get_arccos', (0.89, 2.971)), 1.43, 2.971], [('get_arccos', (0.03, 6.057)), 1.79, 6.057], [('get_arccos', (0.89, 10.937)), 2.25, 10.937]),
            "Kepler-275":([1.28, 1.16],  [('get_arccos', (0.57, 10.301)), 2.34, 10.301], [('get_arccos', (0.06, 16.088)), 3.38, 16.088], [('get_arccos', (0.73, 35.677)), 3.33, 35.677]),
            "Kepler-276":([1.03, 1.02],  [('get_arccos', (0.85, 14.128)), 2.87, 14.128], [('get_arccos', (0.71, 31.884)), 2.9, 31.884], [('get_arccos', (0.01, 48.648)), 2.8, 48.648]),
            "Kepler-279":([1.66, 1.32],  [('get_arccos', (0.69, 12.31)), 3.62, 12.31], [('get_arccos', (0.79, 35.741)), 5.34, 35.741], [('get_arccos', (0.92, 54.4)), 4.96, 54.4]),
            "Kepler-288":([1.02, 1.03],  [('get_arccos', (0.21, 6.097)), 1.67, 6.097], [('get_arccos', (0.06, 19.306)), 2.85, 19.306], [('get_arccos', (0.41, 56.634)), 2.67, 56.634]),
            "Kepler-289":([1.00, 1.08],  [89.59, round(0.192*11.2, 3), 34.545], [89.794, round(1.034*11.2, 3), 125.852], [89.73, round(0.239*11.2, 3), 66.063]),
            "Kepler-295":([0.86, 0.89],  [('get_arccos', (0.02, 12.645)), 1.22, 12.645], [('get_arccos', (0.05, 21.526)), 1.17, 21.526], [('get_arccos', (0.5, 33.884)), 1.36, 33.884]),
            "Kepler-298":([0.65, 0.69],  [('get_arccos', (0.42, 10.475)), 1.96, 10.475], [('get_arccos', (0.59, 22.929)), 1.93, 22.929], [('get_arccos', (0.75, 77.474)), 2.5, 77.474]),
            "Kepler-301":([0.96, 0.98],  [('get_arccos', (0.09, 2.509)), 1.35, 2.509], [('get_arccos', (0.11, 5.419)), 1.35, 5.419], [('get_arccos', (0.27, 13.751)), 1.75, 13.751]),
            "Kepler-310":([0.88, 0.91],  [('get_arccos', (0.21, 13.931)), 1.19, 13.931], [('get_arccos', (0.89, 56.475)), 3.38, 56.475], [('get_arccos', (0.79, 92.876)), 2.47, 92.876]),
            "Kepler-319":([0.92, 0.96],  [('get_arccos', (0.26, 4.363)), 1.63, 4.363], [('get_arccos', (0.13, 6.941)), 2.63, 6.941], [('get_arccos', (0.55, 31.782)), 2.29, 31.782]),
            "Kepler-325":([0.88, 0.91],  [('get_arccos', (0.18, 4.544)), 2.91, 4.544], [('get_arccos', (0.4, 12.762)), 2.54, 12.762], [('get_arccos', (0.17, 38.715)), 2.79, 38.715]),
            "Kepler-326":([0.8, 0.85],   [('get_arccos', (0.88, 2.248)), 1.52, 2.248], [('get_arccos', (0.26, 4.58)), 1.4, 4.58], [('get_arccos', (0.22, 6.767)), 1.21, 6.767]),
            "Kepler-327":([0.55, 0.57],  [('get_arccos', (0.03, 2.55)), 1.11, 2.55], [('get_arccos', (0.22, 5.212)), 1.03, 5.212], [('get_arccos', (0.71, 13.969)), 1.73, 13.969]),
            "Kepler-331":([0.7, 0.74],   [('get_arccos', (0.48, 8.457)), 1.82, 8.457], [('get_arccos', (0.08, 17.281)), 1.84, 17.281], [('get_arccos', (0.29, 32.134)), 1.64, 32.134]),
            "Kepler-332":([0.74, 0.8],   [('get_arccos', (0.13, 7.626)), 1.17, 7.626], [('get_arccos', (0.08, 15.996)), 1.09, 15.996], [('get_arccos', (0.51, 34.212)), 1.18, 34.212]),
            "Kepler-334":([1.11, 1.07],  [('get_arccos', (0.11, 5.47)), 1.12, 5.47], [('get_arccos', (0.03, 12.758)), 1.43, 12.758], [('get_arccos', (0.07, 25.098)), 1.41, 25.098]),
            "Kepler-336":([1.21, 1.09],  [('get_arccos', (0.06, 2.025)), 1.02, 2.025], [('get_arccos', (0.05, 9.6)), 2.1, 9.6], [('get_arccos', (0.5, 20.679)), 2.37, 20.679]),
            "Kepler-339":([0.9, 0.93],   [('get_arccos', (0.6, 4.978)), 1.42, 4.978], [('get_arccos', (0.46, 6.988)), 1.15, 6.988], [('get_arccos', (0.25, 10.558)), 1.17, 10.558]),
            "Kepler-350":([1.36, 1.19],  [('get_arccos', (0.38, 11.19)), 1.85, 11.19], [('get_arccos', (0.15, 17.849)), 3.13, 17.849], [('get_arccos', (0.11, 26.136)), 2.77, 26.136]),
            "Kepler-351":([0.78, 0.81],  [('get_arccos', (0.86, 37.055)), 3.06, 37.055], [('get_arccos', (0.21, 57.248)), 3.19, 57.248], [('get_arccos', (0.5, 142.544)), 2.72, 142.544]),
            "Kepler-354":([0.7, 0.73],   [('get_arccos', (0.73, 5.477)), 1.84, 5.477], [('get_arccos', (0.63, 16.934)), 1.31, 16.934], [('get_arccos', (0.16, 24.21)), 1.24, 24.21]),
            "Kepler-357":([0.77, 0.81],  [('get_arccos', (0.27, 6.475)), 1.84, 6.475], [('get_arccos', (0.82, 16.858)), 2.67, 16.858], [('get_arccos', (0.91, 49.5)), 3.43, 49.5]),
            "Kepler-359":([1.19, 1.14],  [('get_arccos', (0.21, 25.563)), 3.53, 25.563], [('get_arccos', (0.06, 57.688)), 4.3, 57.688], [('get_arccos', (0.92, 77.096)), 4.01, 77.096]),
            "Kepler-363":([1.29, 1.1],   [('get_arccos', (0.06, 3.615)), 1.16, 3.615], [('get_arccos', (0.1, 7.542)), 1.69, 7.542], [('get_arccos', (0.68, 11.932)), 2.05, 11.932]),
            "Kepler-372":([1.18, 1.12],  [('get_arccos', (0.2, 6.85)), 1.36, 6.85], [('get_arccos', (0.23, 20.054)), 2.09, 20.054], [('get_arccos', (0.3, 30.093)), 1.69, 30.093]),
            "Kepler-374":([1.05, 1.04],  [('get_arccos', (0.05, 1.898)), 1.03, 1.898], [('get_arccos', (0.29, 3.283)), 1.1, 3.283], [('get_arccos', (0.69, 5.028)), 1.31, 5.028]),
            "Kepler-398":([0.67, 0.72],  [('get_arccos', (0.87, 4.081)), 0.93, 4.081], [('get_arccos', (0.9, 11.419)), 1.01, 11.419], [('get_arccos', (0.5, 6.834)), 0.88, 6.834]),
            "Kepler-399":([0.94, 0.94],  [('get_arccos', (0.21, 14.425)), 0.96, 14.425], [('get_arccos', (0.18, 26.676)), 1.43, 26.676], [('get_arccos', (0.19, 58.035)), 1.89, 58.035]),
            "Kepler-401":([1.29, 1.17],  [('get_arccos', (0.54, 14.384)), 1.71, 14.384], [('get_arccos', (0.24, 47.318)), 2.15, 47.318], [('get_arccos', (0.5, 184.256)), 2.27, 184.256]),
            "Kepler-403":([1.45, 1.25],  [('get_arccos', (0.11, 7.031)), 1.25, 7.031], [('get_arccos', (0.4, 13.612)), 1.27, 13.612], [('get_arccos', (0.53, 54.281)), 1.75, 54.281]),
            "Kepler-411":([0.82, 0.87],  [87.4, round(0.2142*11.2, 3), 3.005], [88.61, round(0.3944*11.2, 3), 7.834], [89.43, round(0.2961*11.2, 3), 58.02]),
            "Kepler-445":([0.21, 0.18],  [89.74, round(0.14*11.2, 3), 2.894], [89.91, round(0.22*11.2, 3), 4.871], [89.61, round(0.11*11.2, 3), 8.153]),
            "Kepler-446":([0.24, 0.22],  [89.572, round(0.13*11.2, 3), 1.565], [88.97, round(0.1*11.2, 3), 3.036], [88.72, round(0.12*11.2, 3), 5.149]),
            "Kepler-36" :([1.626, 1.071],[('get_arccos', (0.5, 13.84)), 1.486, 13.84], [('get_arccos', (0.5, 16.239)), 3.679, 16.239]),
            "K2-138"    :([0.455, 0.461],[86.9, round(0.14*11.2, 3), 2.353], [87.5, round(0.225*11.2, 3), 3.56], [87.9, round(0.237*11.2, 3), 5.405], [88.7, round(0.294*11.2, 3), 8.261], [89.03, round(0.251*11.2, 3), 12.758], [89.4, round(0.2688*11.2, 3), 41.968]),
            "KOI-94"    :([1.52, 1.277], [89.3, round(0.153*11.2, 3), 3.743], [88.36, round(0.385*11.2, 3), 10.424], [89.871, round(1.005*11.2, 3), 22.343], [89.76, round(0.585*11.2, 3), 54.32]),
            "K2-72"     :([0.331, 0.271],[89.15, round(0.0964*11.2, 3), 5.577], [89.54, round(0.103*11.2, 3), 15.189], [89.26, round(0.0901*11.2, 3), 7.76], [89.68, round(0.115*11.2, 3), 24.159]),
            "K2-133"    :([0.455, 0.461],[87.6, round(0.1195*11.2, 3), 3.071], [88.21, round(0.143*11.2, 3), 4.868], [89.4, round(0.1787*11.2, 3), 11.025], [89.164, round(0.154*11.2, 3), 26.584]),
            "K2-285"    :([0.787, 0.83], [86.846, round(0.231*11.2, 3), 3.472], [89.861, round(0.315*11.2, 3), 7.138], [89.643, round(0.221*11.2, 3), 10.456], [89.799, round(0.174*11.2, 3), 14.763]),
            "K2-3"      :([0.56, 0.6],   [88.8, round(0.194*11.2, 3), 10.054], [89.12, round(0.165*11.2, 3), 24.644], [89.38, round(0.135*11.2, 3), 44.56]),
            "K2-19"     :([0.86, 0.93],  [89.47, round(0.691*11.2, 3), 7.919], [87.99, round(0.434*11.2, 3), 11.907], [85.83, round(0.102*11.2, 3), 2.509]),
            "K2-32"     :([0.87, 0.87],  [89, round(0.4425*11.2, 3), 8.992], [88.23, round(0.2444*11.2, 3), 20.662], [88.4, round(0.2917*11.2, 3), 31.714]),
            "K2-37"     :([0.85, 0.9],   [87.28, round(0.144*11.2, 3), 4.441], [87.37, round(0.245*11.2, 3), 6.429], [88.34, round(0.244*11.2, 3), 14.092]),
            "K2-136"    :([0.66, 0.74],  [89.3, round(0.0883*11.2, 3), 7.975], [89.6, round(0.26*11.2, 3), 17.307], [89.4, round(0.129*11.2, 3), 25.575]),
            "K2-155"    :([0.58, 0.65],  [88.3, round(0.16*11.2, 3), 6.342], [88.96, round(0.23*11.2, 3), 13.85], [89.61, round(0.17*11.2, 3), 40.718]),
            "K2-165"    :([0.804, 0.835],[87.083, round(0.1137*11.2, 3), 2.355], [87.054, round(0.1386*11.2, 3), 4.383], [89.002, round(0.2362*11.2, 3), 14.101]),
            "K2-198"    :([0.757, 0.799],[88.904, round(0.3737*11.2, 3), 17.043], [86.494, round(0.127*11.2, 3), 3.36], [89.86, round(0.2175*11.2, 3), 7.45]),
            "K2-219"    :([1.189, 1.022],[86.795, round(0.1202*11.2, 3), 3.901], [87.269, round(0.1283*11.2, 3), 6.668], [88.287, round(0.2298*11.2, 3), 11.137]),
            "K2-233"    :([0.745, 0.8],  [88.79, round(0.1247*11.2, 3), 2.467], [88.95, round(0.1191*11.2, 3), 7.061], [89.35, round(0.236*11.2, 3), 24.3662]),
            "K2-239"    :([0.36, 0.4],   [88.99, round(0.098*11.2, 3), 5.24], [88.77, round(0.089*11.2, 3), 7.775], [89.43, round(0.098*11.2, 3), 10.115]),
            "K2-266"    :([0.703, 0.686],[88.28, round(0.0629*11.2, 3), 7.814], [89.46, round(0.261*11.2, 3), 14.697], [89.45, round(0.244*11.2, 3), 19.482]),
            "tau Ceti"  :([0.783, 0.012, 0.793, 0.004], [35, round(pfm(measurement=1.75/math.sin(35*math.pi/180), predict="Radius", dataset="kepler")[0], 3), 20], [35, round(pfm(measurement=1.83/math.sin(35*math.pi/180), predict="Radius", dataset="kepler")[0], 3), 49.41], [35, round(pfm(measurement=3.93/math.sin(35*math.pi/180), predict="Radius", dataset="kepler")[0], 3), 162.87], [35, round(pfm(measurement=3.93/math.sin(35*math.pi/180), predict="Radius", dataset="kepler")[0], 3), 636.13]),
            "HIP 41378" :([1.4, 1.15],   [88.4, 2.9, 5.715], [89.58, 2.56, 31.698], [89.98, 5.51, 131], [89.7, 3.96, 157], [89.9, 10.2, 324]),
            "V1298 Tau" :([1.345, 1.101],[89, round(0.916*11.2, 3), 24.14], [88.49, round(0.499*11.2, 3), 8.25], [89.04, round(0.572*11.2, 3), 12.403], [89.4, round(0.78*11.2, 3), 60]),
            "GJ 9827"   :([0.602, 0.606],[86.07, round(0.1407*11.2, 3), 1.209], [88.19, round(0.1107*11.2, 3), 3.648], [87.443, round(0.1804*11.2, 3), 6.765]),
            "HR 858"    :([1.31, 1.145], [85.5, round(0.186*11.2, 3), 3.586], [86.23, round(0.173*11.2, 3), 5.973], [87.43, round(0.1931*11.2, 3), 11.23]),
            "WASP-47"   :([1.16, 1.11],  [89.02, round(1.17*11.2, 3), 4.159], [89.22, round(0.331*11.2, 3), 9.03], [86.2, round(0.167*11.2, 3), 0.79]),
            }
       
        def set_up(target):
            """Sets up target"""

            def get_arccos(star_pars, planet_pars):
                return round(np.arccos(planet_pars[0]/(self.K3(planet_pars[1], star_pars[2])/(star_pars[0]*self.R_sun)))*180/math.pi, 3)

            def get_arccos1(star_pars, planet_pars):
                return round(np.arccos(np.random.rand()/(self.K3(planet_pars[0], star_pars[2])/(star_pars[0]*self.R_sun)))*180/math.pi, 3)
           
            t = list(targets_dict[target])
            for x in range(len(t)):
                for y in range(len(t[x])):
                    if isinstance(t[x][y], tuple):
                        t[x][y] = locals()[t[x][y][0]](t[0],t[x][y][1])

            return t[0][0], t[0][1], t[0][2], t[0][3], np.array(t[1:]), target

        self.n_tot = []
        self.r_tot = []
        pers = []
        rads = []
        self.n_tot_log = []
        self.PRs = []
        self.PD = []
        self.DD = 1
        self.tdm = []
        self.tdue = []
        self.tdle = []
        self.tpm = []
        self.tpue = []
        self.tple = []
        self.targets = []
        P = np.arange(0.5, 730.1, 0.1)
        Pl = np.logspace(0.3, 2.86, 290)
        Plb = np.logspace(0.295, 2.865, 291)
        Pf = np.arange(0.1, 730.01, 0.01)
        #R = np.arange(0.1, 15.01, 0.01)        # for full TESS data set - NOT RECOMMENDED
        #Rf = np.arange(0.1, 15.001, 0.001)     # for full TESS data set - NOT RECOMMENDED
        R = np.arange(0.1, 5.01, 0.01)
        Rf = np.arange(0.1, 5.001, 0.001)
        Plbw = [Plb[i] - Plb[i-1] for i in range(1, len(Plb))]
        self.run_type = ""
        saved = False

        def plot_figs(plot_fig_p, plot_fig_r, pers, rads, P, R, Pf, Rf, targets):
            """PLots figures"""

            for i in range(len(targets)):
                targets[i][1] = int(float(targets[i][1])*100 - 10)
                targets[i][2] = int(float(targets[i][2])*100)
                targets[i][3] = int(float(targets[i][3])*100)
                targets[i][4] = int(float(targets[i][4])*1000 - 100)
                targets[i][5] = int(float(targets[i][5])*1000)
                targets[i][6] = int(float(targets[i][6])*1000)

            pfpi = np.zeros((len(plot_fig_p), len(Pf)))

            for i in range(len(plot_fig_p)):
                pfpi[i] = np.interp(Pf, P[:1855], plot_fig_p[i])

            pfri = np.zeros((len(plot_fig_r), len(Rf)))

            for i in range(len(plot_fig_r)):
                pfri[i] = np.interp(Rf, R, plot_fig_r[i])

            prf = np.zeros((len(Rf), len(Pf)))

            for i in range(len(targets)):
                pp = [pfpi[i*200, j] for j in range(len(Pf))]
                pr = [pfri[i*200, j] for j in range(len(Rf))]
                prf += np.outer(pr, pp)

            fig, ax = plt.subplots(1,1, figsize=(20, 12))
            fig.suptitle(r"Period-Planet Radius Relative Likelihood", fontsize=30)
            img = ax.imshow(prf, cmap=plt.cm.viridis, origin="lower", aspect="auto")
            ax.set_xscale("Log")
            xlabels = [0.1, 1, 10, 100]
            ylabels = [0, 1, 2, 3, 4, 5]
            ax.set_xticks([0, 90, 990, 9990])
            ax.set_yticks([-100, 900, 1900, 2900, 3900, 4900])
            ax.set_xticklabels(xlabels)
            ax.set_yticklabels(ylabels)
            ax.tick_params(labelsize=14)
            plt.scatter([int(targets[i][1]) for i in range(len(targets))], [int(targets[i][4]) for i in range(len(targets))], color="w", marker="*")

            for i in range(len(targets)):
                ple = int(targets[i][1]) - int(targets[i][2])
                pue = int(targets[i][1]) + int(targets[i][3])
                rle = int(targets[i][4]) - int(targets[i][5])
                rue = int(targets[i][4]) + int(targets[i][6])
                ellipse = mpatch.Ellipse((np.mean([ple, pue]), np.mean([rle, rue])), pue-ple, rue-rle, alpha=0.1, color="w")
                ax.add_patch(ellipse)

            bottom = ["TOI 119", "TOI 286", "TOI 487", "TOI 736", "TOI 797", "TOI 1453", "TOI 1720", "TOI 1726", "TOI 1749"]        # text placements - edit each time for optimal annotating
            left = ["TOI 256", "TOI 1269"]
            right = ["TOI 174", "TOI 431", "TOI 703", "TOI 1277", "TOI 1730"]
            tl = ["TOI 125"]
            tr = ["TOI 266"]
            bl = ["TOI 836", "TOI 1260"]
            br = ["TOI 1438"]

            for i in range(len(targets)):
                if targets[i][0] in bottom:
                    plt.annotate(targets[i][0][targets[i][0].find(" "):], (int(targets[i][1]), int(targets[i][4])), color="w", textcoords="offset points", xytext=(0,-20), ha="center", weight='bold', fontsize=16)

                elif targets[i][0] in right:
                    plt.annotate(targets[i][0][targets[i][0].find(" "):], (int(targets[i][1]), int(targets[i][4])), color="w", textcoords="offset points", xytext=(25,-7), ha="center", weight='bold', fontsize=16)

                elif targets[i][0] in left:
                    plt.annotate(targets[i][0][targets[i][0].find(" "):], (int(targets[i][1]), int(targets[i][4])), color="w", textcoords="offset points", xytext=(-30,-7), ha="center", weight='bold', fontsize=16)

                elif targets[i][0] in tl:
                    plt.annotate(targets[i][0][targets[i][0].find(" "):], (int(targets[i][1]), int(targets[i][4])), color="w", textcoords="offset points", xytext=(-25,7), ha="center", weight='bold', fontsize=16)

                elif targets[i][0] in tr:
                    plt.annotate(targets[i][0][targets[i][0].find(" "):], (int(targets[i][1]), int(targets[i][4])), color="w", textcoords="offset points", xytext=(12,5), ha="center", weight='bold', fontsize=16)

                elif targets[i][0] in bl:
                    plt.annotate(targets[i][0][targets[i][0].find(" "):], (int(targets[i][1]), int(targets[i][4])), color="w", textcoords="offset points", xytext=(-15,-20), ha="center", weight='bold', fontsize=16)

                elif targets[i][0] in br:
                    plt.annotate(targets[i][0][targets[i][0].find(" "):], (int(targets[i][1]), int(targets[i][4])), color="w", textcoords="offset points", xytext=(15,-20), ha="center", weight='bold', fontsize=16)

                else:
                    plt.annotate(targets[i][0][targets[i][0].find(" "):], (int(targets[i][1]), int(targets[i][4])), color="w", textcoords="offset points", xytext=(0,8), ha="center", weight='bold', fontsize=16)

            cb = fig.colorbar(img)
            cb.set_label(label="Probability normalized to 1 injected planet per system", size=20)
            cb.ax.tick_params(labelsize=14)
            plt.xlabel("Log Period (days)", fontsize=20)
            plt.ylabel(r"Radius ($R_{\oplus}$)", fontsize=20)
            #plt.xlim(150, 11000)
            plt.xlim(40, 11000)
            plt.ylim(750, 4200)
            #plt.savefig("PRfig_epos_ell.png", bbox_inches='tight')
            plt.savefig("PRfig_syssim_ell.png", bbox_inches='tight')
            #plt.show()
            plt.close()

            fig, ax = plt.subplots(1,1, figsize=(10,12))
            fig.suptitle(r"Period Relative Likelihoods for $TESS$ Systems", fontsize=30)
            img = ax.imshow(pfpi, cmap=plt.cm.Blues, origin="lower", aspect="auto")
            ax.set_xscale("Log")
            #xlabels = [0, 20, 40, 60, 80, 100, 120, 140, 160, 180]
            xlabels = [0.1, 1, 10, 100]
            ylabels = [tn for tn in targets_dict.keys() if tn.find("TOI") != -1]
            #ax.set_xticks([-50, 1500, 3500, 5500, 7500, 9500, 11500, 13500, 15500, 17500]) 
            ax.set_xticks([0, 90, 990, 9990])
            ax.set_yticks(np.arange(100, len(ylabels)*200 + 100, 200))
            ax.set_xticklabels(xlabels)
            ax.set_yticklabels(ylabels)
            ax.tick_params(labelsize=12)
            cb = fig.colorbar(img)
            cb.set_label(label="Probability normalized to 1 injected planet per system", size=16)
            cb.ax.tick_params(labelsize=12)
            plt.xlabel("Period (days)", fontsize=16)
            plt.ylabel("Systems", fontsize=16)
            plt.xlim(10, 73000)
            #plt.xlim(-500, 18000)
            pc = 100
            plt.scatter(np.where(np.isclose(Pf, pers[0][0], atol=0.06))[0][0], pc, color="r", s=int(round(rads[0][0]*20, 0)), label="Known Planets")

            for i in range(len(pers)):
                for j in range(len(pers[i])):
                    plt.scatter(np.where(np.isclose(Pf, pers[i][j], atol=0.06))[0][0], pc, color="r", s=int(round(rads[i][j]*20, 0)))

                pc += 200

            #plt.savefig("logPfig_epos.png", bbox_inches='tight')
            plt.savefig("logPfig_syssim.png", bbox_inches='tight')
            #plt.show()
            plt.close()
            
            fig, ax = plt.subplots(1,1, figsize=(10,12))
            fig.suptitle(r"Planet Radius Relative Likelihoods for $TESS$ Systems", fontsize=30)
            img = ax.imshow(pfri, cmap=plt.cm.Blues, origin="lower", aspect="auto")
            xlabels = [0, 1, 2, 3, 4, 5]
            ylabels = [tn for tn in targets_dict.keys() if tn.find("TOI") != -1]
            ax.set_xticks([-100, 900, 1900, 2900, 3900, 4900]) 
            ax.set_yticks(np.arange(100, len(ylabels)*200 + 100, 200))
            ax.set_xticklabels(xlabels)
            ax.set_yticklabels(ylabels)
            ax.tick_params(labelsize=12)
            cb = fig.colorbar(img)
            cb.set_label(label="Probability normalized to 1 injected planet per system", size=16)
            cb.ax.tick_params(labelsize=12)
            plt.xlabel(r"Radius ($R_{\oplus}$)", fontsize=16)
            plt.ylabel("Systems", fontsize=16)
            rc = 100
            plt.scatter(np.where(np.isclose(Rf, rads[0][0], atol=0.006))[0][0], rc, color="r", label="Known Planets")

            for i in range(len(rads)):
                for j in range(len(rads[i])):
                    plt.scatter(np.where(np.isclose(Rf, rads[i][j], atol=0.006))[0][0], rc, color="r")

                rc += 200

            plt.savefig("Rfig.png", bbox_inches='tight')
            #plt.show()
            plt.close()

        if self.run_type == "TOI" and not saved:
            for tn in targets_dict.keys():
                if tn.find("TOI") != -1:
                    R_star, Rse, M_star, Mse, target, target_name = set_up(tn)
                    target = target[target[:, 2].argsort()]
                    pers.append([target[i][2] for i in range(len(target))])
                    rads.append([target[i][1] for i in range(len(target))])
                    #rad = [target[i][1] for i in range(len(target))]
                    per = [target[i][2] for i in range(len(target))]
                    #p0 = min(per)
                    #fP = self.epos_pers(p0, per, rad, P, M_star)
                    
                    for i in range(1, len(per)):
                        self.PRs.append(per[i]/per[i-1])

                    self.run_monte_carlo(R_star, Rse, M_star, Mse, target, target_name)

            plot_deltas = False
            plot_ratios = False
            plot_period_radius = False
            plot_solo_params = False

            if test_deltas:
                PDs = [sum(x) for x in zip(*self.PD)]
                PDs = [PDs[i]/46 for i in range(len(PDs))]
                Du = np.arange(0, len(PDs), self.DD)
                PDs = np.insert(PDs, 8, np.zeros(99))
                Du = np.insert(Du, 8, np.arange(7.01, 8, 0.01))
                
                f = open("Deltas_syssim.txt", "w")

                for i in range(len(Du)):
                    f.write(str(Du[i]) + "\t" + str(PDs[i]) + "\n")

                f.close()
                plt.plot(Du, PDs)
                plt.show()
                #exit()

            if plot_ratios:
                self.PRs = np.array(self.PRs)
                fig, ax = plt.subplots(figsize=(12,8))
                plt.hist(self.PRs, bins=np.logspace(0,1.4,15), label="TESS Systems")

                logD = -0.9
                sigma = 0.4
                PRgrid = np.logspace(0,1.4,100)

                with np.errstate(divide='ignore'):
                    Dgrid = np.log(2.*(PRgrid**(2./3.)-1.)/(PRgrid**(2./3.)+1.))

                Dgrid[0] = -4
                pdfP = spst.norm(logD, sigma).pdf(Dgrid)
                cdfP = spst.norm(logD, sigma).cdf(Dgrid)
                plt.plot(PRgrid, 17*pdfP, linewidth=4, label=r"$Kepler$ PDF fit")
                plt.xscale("Log")
                plt.xlabel(r"Period Ratio $P_i/P_{i-1}$", fontsize=20)
                plt.ylabel("Occurrence", fontsize=20)
                plt.legend(fontsize=16)
                ax.xaxis.set_major_formatter(mticker.ScalarFormatter())
                ax.set_xticklabels([0.1,1,10])
                ax.tick_params(labelsize=14)
                ax.set_yticks([0, 5, 10, 15, 20])
                plt.suptitle(r"$Kepler$ and $TESS$ Period Ratios", fontsize=30)
                plt.xlim(1, 10**1.4)
                plt.show()
                #exit()

            if plot_period_radius:
                x = []

                for i in range(len(self.tdm)):
                    x.append([self.tdm[i], self.tdle[i], self.tdue[i], self.tpm[i], self.tple[i], self.tpue[i]])

                np.savetxt("td_tp.txt", x)
                fig, ax = plt.subplots(figsize=(12,8))
                plt.plot(self.tdm, self.tpm, "o")
                
                names = [set_up(tn)[5] for tn in targets_dict.keys() if tn.find("TOI") != -1]
                #bunch = ["TOI 261", "TOI 266", "TOI 396", "TOI 411", "TOI 487", "TOI 561", "TOI 703", "TOI 797", "TOI 1238", "TOI 1346", "TOI 1453", "TOI 1469", "TOI 1726"]
                bunch = ["TOI 256", "TOI 714", "TOI 736"]
                #bunch = ["TOI 396", "TOI 411", "TOI 286", "TOI 1469", "TOI 487", "TOI 174", "TOI 261", "TOI 1453", "TOI 713", "TOI 1339", "TOI 431", "TOI 282", "TOI 1346", "TOI 1238", "TOI 266", "TOI 1726", "TOI 797", "TOI 1269", "TOI 703", "TOI 1730", "TOI 696", "TOI 836", "TOI 732", "TOI 1449", "TOI 763", "TOI 1260"]
                bottom = []
                left = []
                right = []

                for i in range(len(names)):
                    tdle = self.tdm[i] - self.tdle[i]
                    tdue = self.tdm[i] + self.tdue[i]
                    tple = self.tpm[i] - self.tple[i]
                    tpue = self.tpm[i] + self.tpue[i]
                    ellipse = mpatch.Ellipse((np.mean([tdle, tdue]), np.mean([tple, tpue])), tdue-tdle, tpue-tple, alpha=0.1)
                    ax.add_patch(ellipse)

                    if names[i] not in bunch:
                        if names[i] in bottom:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(0,-20), ha='center', fontsize=16)

                        elif names[i] in left:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(-30,-5), ha='center', fontsize=16)

                        elif names[i] in right:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(25,-5), ha='center', fontsize=16)

                        else:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(0,10), ha='center', fontsize=16)

                    else:
                        if names[i] in bottom:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(0,-20), ha='center', fontsize=16)

                        elif names[i] in left:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(-30,-5), ha='center', fontsize=16)

                        elif names[i] in right:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(30,-5), ha='center', fontsize=16)

                        else:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(0,10), ha='center', fontsize=16)

                ax.xaxis.set_major_formatter(mticker.ScalarFormatter())
                plt.xlim(150, max(self.tdm) + max(self.tdue))
                #plt.xlim(150, 3500)
                #plt.xlim(150, 800)
                #plt.ylim(0.75, 0.85)
                #plt.xlim(150, 1150)
                #plt.ylim(0.8, 0.89)
                ax.tick_params(labelsize=14)
                plt.xlabel("Transit Depth (ppm)", fontsize=20)
                plt.ylabel("Transit Probability", fontsize=20)
                plt.show()
                #exit()
            
            if plot_solo_params:
                plot_fig_p = []
                plot_fig_r = []

                for i in range(len(self.n_tot)):
                    for j in range(200):
                        plot_fig_p.append(self.n_tot[i][:1855])
                        plot_fig_r.append(self.r_tot[i])

                plot_fig_p = np.array(plot_fig_p)
                plot_fig_r = np.array(plot_fig_r)
                np.savetxt("plot_fig_p.txt", plot_fig_p)
                np.savetxt("plot_fig_r.txt", plot_fig_r)
                np.savetxt("targets.txt", self.targets, fmt='%s', delimiter='\t')
                plot_figs(plot_fig_p, plot_fig_r, pers, rads, P, R, Pf, Rf, self.targets)
                #exit()

        elif self.run_type == "TOI" and saved:
            for tn in targets_dict.keys():
                if tn.find("TOI") != -1:
                    R_star, Rse, M_star, Mse, target, target_name = set_up(tn)
                    target = target[target[:, 2].argsort()]
                    pers.append([target[i][2] for i in range(len(target))])
                    rads.append([target[i][1] for i in range(len(target))])

            plot_period_radius = False
            plot_solo_params = False

            if plot_period_radius:
                self.tdm, self.tdle, self.tdue, self.tpm, self.tple, self.tpue = np.loadtxt("td_tp.txt", unpack=True)
                self.tpm = np.around(self.tpm, 3)
                fig, ax = plt.subplots(figsize=(12,8))
                plt.plot(self.tdm, self.tpm, "o")
                
                names = [set_up(tn)[5] for tn in targets_dict.keys() if tn.find("TOI") != -1]
                #bunch = ["TOI 261", "TOI 266", "TOI 396", "TOI 411", "TOI 487", "TOI 561", "TOI 703", "TOI 797", "TOI 1238", "TOI 1346", "TOI 1453", "TOI 1469", "TOI 1726"]
                #bunch = ["TOI 256", "TOI 714", "TOI 736"]
                bunch = ["TOI 396", "TOI 411", "TOI 286", "TOI 1469", "TOI 487", "TOI 261", "TOI 1453", "TOI 713", "TOI 1339", "TOI 431", "TOI 282", "TOI 1346", "TOI 1238", "TOI 266", "TOI 1726", "TOI 797", "TOI 1269", "TOI 703", "TOI 1730", "TOI 696", "TOI 836", "TOI 732", "TOI 1449", "TOI 763", "TOI 1260"]
                bottom = ["TOI 286", "TOI 411", "TOI 703", "TOI 713", "TOI 797", "TOI 1260", "TOI 1453", "TOI 1726"]
                left = ["TOI 1449", "TOI 1469"]
                right = []

                for i in range(len(names)):
                    tdle = self.tdm[i] - self.tdle[i]
                    tdue = self.tdm[i] + self.tdue[i]
                    tple = self.tpm[i] - self.tple[i]
                    tpue = self.tpm[i] + self.tpue[i]
                    ellipse = mpatch.Ellipse((np.mean([tdle, tdue]), np.mean([tple, tpue])), tdue-tdle, tpue-tple, alpha=0.1)
                    ax.add_patch(ellipse)

                    if names[i] not in bunch:
                        if names[i] in bottom:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(0,-20), ha='center', fontsize=16)

                        elif names[i] in left:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(-30,-5), ha='center', fontsize=16)

                        elif names[i] in right:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(25,-5), ha='center', fontsize=16)

                        else:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(0,10), ha='center', fontsize=16)

                    else:
                        if names[i] in bottom:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(0,-20), ha='center', fontsize=16)

                        elif names[i] in left:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(-30,-5), ha='center', fontsize=16)

                        elif names[i] in right:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(30,-5), ha='center', fontsize=16)

                        else:
                            plt.annotate(names[i][names[i].find(" "):], (self.tdm[i], self.tpm[i]), textcoords="offset points", xytext=(0,10), ha='center', fontsize=16)

                ax.xaxis.set_major_formatter(mticker.ScalarFormatter())
                plt.xlim(150, max(self.tdm) + max(self.tdue))
                #plt.xlim(150, 3500)
                #plt.xlim(150, 800)
                #plt.ylim(0.75, 0.85)
                plt.xlim(150, 1150)
                plt.ylim(0.8, 0.9)
                ax.tick_params(labelsize=14)
                plt.xlabel("Transit Depth (ppm)", fontsize=20)
                plt.ylabel("Transit Probability", fontsize=20)
                plt.show()
                #exit()

            if plot_solo_params:
                plot_fig_p = np.loadtxt("plot_fig_p.txt")
                plot_fig_r = np.loadtxt("plot_fig_r.txt")
                self.targets = np.loadtxt("targets.txt", dtype='str', delimiter='\t')
                plot_figs(plot_fig_p, plot_fig_r, pers, rads, P, R, Pf, Rf, self.targets)
                #exit()

        elif self.run_type == "Kepler":
            for tn in targets_dict.keys():
                if tn.find("Kepler") != -1 or tn.find("K2") != -1 or tn.find("KOI") != -1:
                    R_star, Rse, M_star, Mse, target, target_name = set_up(tn)
                    target = target[target[:, 2].argsort()]
                    self.run_monte_carlo(R_star, Rse, M_star, Mse, target, target_name)

        else:
            R_star, Rse, M_star, Mse, target, target_name = set_up("Kepler-154")
            target = target[target[:, 2].argsort()]
            self.run_monte_carlo(R_star, Rse, M_star, Mse, target, target_name)



    def run_monte_carlo(self, R_star, Rse, M_star, Mse, target, target_name):
        """Runs the Monte Carlo analysis."""

        inc = [target[i][0] for i in range(len(target))]
        rad = [target[i][1] for i in range(len(target))]
        per = [target[i][2] for i in range(len(target))]

        for i in range(1, len(per)):
            self.PRs.append(per[i]/per[i-1])

        p0 = min(per)
        r1 = min(rad)
        r2 = max(rad)
        P = np.arange(0.5, 730.1, 0.1)
        Rcp = "clustered"       # accepted values are "powerlaw", "clustered"

        #PP, PD = self.epos_pers(p0, per, rad, P, M_star)
        PP, PD = self.syssim_pers(per, rad, P, M_star)
        self.PD.append(PD)

        if len(rad) == 5:
            R, PR, cdfR = self.epos_rads(r1, r2)

        else:
            R, PR, cdfR = self.syssim_rads(Rcp, rad)

        i = np.linspace(0, 180.1, 1802)
        fi = np.zeros(len(i))

        if len(inc) == 2:
            for j in range(len(i)):
                fi[j] = np.sin(i[j]*math.pi/180)*76/300

            fi = fi*76/(300*np.trapz(fi, i))

        elif len(inc) == 3:
            for j in range(len(i)):
                fi[j] = np.sin(i[j]*math.pi/180)*38/300

            fi = fi*38/(300*np.trapz(fi, i))

        rylgh = 2
        ibs = []
        fib = []


        if len(inc) == 4:
            incn = [[inc[0], inc[1], inc[2], inc[3]], [inc[0], 180-inc[1], inc[2], inc[3]], [inc[0], inc[1], 180-inc[2], inc[3]], [inc[0], inc[1], inc[2], 180-inc[3]], [inc[0], 180-inc[1], 180-inc[2], inc[3]], [inc[0], 180-inc[1], inc[2], 180-inc[3]], [inc[0], 180-inc[1], 180-inc[2], 180-inc[3]]]

        elif len(inc) == 3:
            incn = [[inc[0], inc[1], inc[2]], [inc[0], 180-inc[1], inc[2]], [inc[0], inc[1], 180-inc[2]], [inc[0], 180-inc[1], 180-inc[2]]]

        elif len(inc) == 2:
            incn = [[inc[0], inc[1]], [inc[0], 180-inc[1]]]

        elif len(inc) == 5:
            incn = [[inc[0]]]

        for j in range(len(i)):
            for k in range(len(incn)):
                test = 0

                for m in range(len(incn[k])):
                    test += spst.rayleigh.pdf(abs(incn[k][m]-i[j]), rylgh)

                ibs.append(i[j])
                fib.append(test)

        ib = ibs[np.where(fib == max(fib))[0][0]]

        if ib > 90:
            ib = 180 - ib

        inew = np.linspace(0, 10, 101)
        finew = spst.rayleigh.pdf(inew + ib, ib, rylgh)

        if len(inc) == 2:
            finew = finew*0.62

        elif len(inc) == 3:
            finew = finew*0.81

        i_ib = np.where(np.isclose(i,ib))[0][0]

        for j in range(len(inew)):
            fi[i_ib + j] += finew[j]

        cdfi = np.array([1 - math.exp(-(inew[j])**2/(2*(rylgh)**2)) for j in range(len(inew))])
        Pi = fi/2
        Pk = []
        Rk = []
        ik = []
        Nk = []

        for k in range(10000):
            N = 0

            for j in range(len(PP)):
                if np.random.rand() < PP[j]:
                    N += 1
                    Pk.append(P[j])
                    RR = np.random.rand()
                    Rk.append(R[np.where(RR - cdfR < 0)[0][0]])
                    ii = np.random.rand()
                    iso = np.random.rand()

                    if (len(inc) == 2 and iso > 0.38) or (len(inc) == 3 and iso > 0.19) or (len(inc) >= 4):
                        if len(np.where(ii - cdfi < 0)[0]) == 0:
                            ik.append(inew[-1] + ib)

                        else:
                            ik.append(inew[np.where(ii - cdfi < 0)[0][0]] + ib)

                    else:
                        ik.append(np.arccos(np.random.rand()*2 - 1)*180/math.pi)

            Nk.append(N)

        p1 = []     # known planet period
        p11 = []    # inserted planet period for iteration
        p12 = [20, 49.41, 162.87, 636.13]       # known non-transiting planet periods
        p2 = []     # removed known planet period
        p3 = [13.965, 35.362, 94.11]        # unconfirmed planet candidate periods
        r1 = []     # " for planet radius
        r11 = []    # " for planet radius
        r12 = [round(pfm(measurement=1.75/math.sin(35*math.pi/180), predict="Radius", dataset="kepler")[0]*100, 0), round(pfm(measurement=1.83/math.sin(35*math.pi/180), predict="Radius", dataset="kepler")[0]*100, 0), round(pfm(measurement=3.93/math.sin(35*math.pi/180), predict="Radius", dataset="kepler")[0]*100, 0), round(pfm(measurement=3.93/math.sin(35*math.pi/180), predict="Radius", dataset="kepler")[0]*100, 0)]      # " for planet radius
        r2 = []     # " for planet radius
        r3 = [round(pfm(measurement=2/math.sin(35*math.pi/180), predict="Radius", dataset="kepler")[0]*100, 0), round(pfm(measurement=3.1/math.sin(35*math.pi/180), predict="Radius", dataset="kepler")[0]*100, 0), round(pfm(measurement=3.6/math.sin(35*math.pi/180), predict="Radius", dataset="kepler")[0]*100, 0)]     # " for planet radius
        ul = 0.01

        n, b, _ = plt.hist(Pk, bins=np.arange(0.5, round(5*max(per)) + 1, 0.5), weights=np.ones(len(Pk))*2 / (len(Pk)), label="DYNAMITE Predictions")
        plt.plot(P, PP, label="PDF")
        plt.xlabel("Period (days)")
        plt.ylabel("Relative Likelihood")
        plt.xlim(0, 5*max(per))
        plt.legend()
        #plt.show()
        Pb = list(P)
        Pb.append(730.1)
        n, b, _ = plt.hist(Pk, bins=Pb, weights=np.ones(len(Pk))*10 / len(Pk), label="DYNAMITE Predictions")
        self.n_tot.append(n)
        plt.plot(P, PP, label="PDF")
        plt.xlabel("Period (days)")
        plt.ylabel("Relative Likelihood")
        plt.xlim(0, 5*max(per))
        plt.legend()
        #plt.show()
        plt.close()
        Pl = np.logspace(-0.3, 2.86, 317)
        Plb = list(Pl)
        Plb.append(10**2.895)
        #nl, _, _ = plt.hist(Pk, bins=Plb, label="DYNAMITE Predictions")
        bins = np.array(Plb)
        widths = (bins[1:] - bins[:-1])
        hist = np.histogram(Pk, bins=bins)
        hist_norm = hist[0]/widths
        fig, ax = plt.subplots(figsize=(12,8))
        plt.bar(bins[:-1], hist_norm/100000, widths, label="DYNAMITE Predictions")
        PPl = np.interp(Pl, P, PP)
        plt.plot(Pl, PPl, color='#ff7f0e', label="PDF", linewidth=4)
        #plt.scatter(p1, np.ones(len(p1))*ul/20, c="g", s=r1, label="Known planets still in system", zorder=2)
        #plt.scatter(p11, np.ones(len(p11))*ul/20, c="purple", marker="s", s=r11, label="Highest relative likelihood for inserted planet", zorder=2)
        plt.scatter(p12, np.ones(len(p12))*ul/20, c="g", marker="^", s=r12, label=("Known non-transiting planets") if len(p12) > 1 else ("Known non-transiting planet"), zorder=2)
        #plt.scatter(p2, np.ones(len(p2))*ul/20, c="w", marker="X", edgecolors="k", s=r2, linewidth=2, label=("Known planets removed from system") if len(p2) > 1 else ("Known planet removed from system"), zorder=2)
        plt.scatter(p3, np.ones(len(p3))*ul/20, c="y", marker='$?$', s=r3, label=("Unconfirmed planet candidates") if len(p3) > 1 else ("Unconfirmed planet candidate"), zorder=2)
        #self.n_tot_log.append(nl)
        plt.xlabel("Log Period (days)", fontsize=20)
        plt.ylabel("Relative Likelihood", fontsize=20)
        plt.xscale("Log")
        plt.xlim(0.5, 730)
        plt.ylim(0, ul)
        plt.legend(fontsize=16)
        ax.tick_params(labelsize=14)
        ax.xaxis.set_major_formatter(mticker.ScalarFormatter())
        fig.suptitle("tau Ceti", fontsize=30)
        #plt.show()
        #exit()
        plt.close()
        Rk = np.array(Rk)
        n, b, _ = plt.hist(Rk, bins=np.arange(R[0], R[-1] + 0.01, 0.005), weights=np.ones(len(Rk))*20 / len(Rk), label="DYNAMITE Predictions")
        plt.plot(R, PR, label="PDF")
        plt.scatter([1.78, 4.12, 2.26, 2.95], np.ones(4)*0.1, c="g", label="Known planets still in system", zorder=2)
        plt.scatter(1.5, 0.1, c="r", marker="x", label="Known planet removed from system", zorder=2)
        plt.xlabel(r"Radius ($R_{\oplus}$)")
        plt.ylabel("Relative Likelihood")
        plt.legend()
        #plt.show()
        Rb = list(R)
        Rb.append(15.01)
        n, b, _ = plt.hist(Rk, bins=Rb, weights=np.ones(len(Rk))*10 / len(Rk), label="DYNAMITE Predictions")
        self.r_tot.append(n)
        plt.plot(R, PR, label="PDF")
        plt.xlabel(r"Radius ($R_{\oplus}$)")
        plt.ylabel("Relative Likelihood")
        plt.legend()
        #plt.show()
        plt.close()
        ik = np.array(ik)
        ik = np.array([ik[i] if ik[i] < 90 else 180-ik[i] for i in range(len(ik))])     # toggle for allowing inclinations to be greater than 90 degrees or truncated back to 0-90 range
        plt.hist(ik, bins=np.linspace(0, 180.5, 362), weights=np.ones(len(ik)) / (len(ik)), label="DYNAMITE Predictions")
        plt.plot(i, Pi, label="PDF")
        plt.xlabel("Inclination (degrees)")
        plt.ylabel("Relative Likelihood")
        plt.legend()
        #plt.show()
        plt.close()

        if self.run_type == "":
            fig, ax = plt.subplots()
            n, xedges, yedges, _ = ax.hist2d(Rk, ik, bins=[50,27], cmap=plt.cm.Blues)
            plt.plot(1.5, 88.6, "r*", label="Planet Data")
            #plt.plot(np.mean(Rk), np.mean(ik), "bo", label="DYNAMITE Predictions")
            #plt.plot(np.percentile(Rk, 50), np.percentile(ik, 50), "bo", label="DYNAMITE Predictions")
            plt.plot(xedges[16]-(xedges[16]-xedges[15])/2, yedges[26]-(yedges[26]-yedges[25])/2, "bo", label="DYNAMITE Predictions")
            ellipse = mpatch.Ellipse((1.565, 88.6), 0.55, 0.6, alpha=0.3, color="r")
            ax.add_patch(ellipse)
            ellipse = mpatch.Ellipse((1.59, 88.6), 1.1, 1.2, alpha=0.2, color="r")
            ax.add_patch(ellipse)
            ellipse = mpatch.Ellipse((1.635, 88.6), 1.65, 1.8, alpha=0.1, color="r")
            ax.add_patch(ellipse)
            plt.xlim(0.5,5)
            plt.ylim(84,90)
            plt.legend(loc=4, fontsize=16)
            plt.xlabel(r"Planet Radius ($R_\oplus$)", fontsize=18)
            plt.ylabel("Inclination (degrees)", fontsize=18)
            ax.tick_params(labelsize=12)
            plt.title("Predicted and Observed Radius and Inclination for Kepler-154 f", fontsize=20)
            plt.show()
            exit()

        outers = ["TOI 561", "TOI 431", "TOI 1238", "TOI 732", "TOI 696", "TOI 175", "TOI 663", "TOI 1469", "TOI 1260", "TOI 270", "TOI 396", "TOI 836", "TOI 411", "TOI 1269", "TOI 1453", "TOI 714", "TOI 1749", "TOI 125", "TOI 1438", "TOI 119", "TOI 763", "TOI 1136", "TOI 1064", "TOI 266", "TOI 178", "TOI 776", "TOI 1339", "TOI 214", "TOI 700", "TOI 1266", "TOI 553", "TOI 699", "TOI 1277"]
        inners = ["TOI 282"]

        Pi = np.arange(0.5, 146.001, 0.001)
        #PPi, _ = self.epos_pers(p0, per, rad, Pi, M_star)      # remove comments around if-else block and Pm/PPm block for EPOS
        """
        if target_name in outers or target_name in inners:
            PPz = PPi

        else:
            Pz = np.where(PPi == 0)[0]
            PPz = PPi[Pz[1]:Pz[-1]]

        Pm = Pi[np.where(PPi == np.amax(PPz))[0][0]]
        PPm = np.amax(PPz)
        """
        PPi, _ = self.syssim_pers(per, rad, Pi, M_star)
        Pm = Pi[np.where(PPi == np.amax(PPi))[0][0]]
        PPm = np.amax(PPi)
        Ple = Pm - Pi[np.where((Pi < Pm) & (PPi < 0.606*PPm))][-1]
        Pue = Pi[np.where((Pi > Pm) & (PPi < 0.606*PPm))][0] - Pm
        Rm = np.percentile(Rk, 50)
        Rle = Rm - np.percentile(Rk, 16)
        Rue = np.percentile(Rk, 84) - Rm
        tdm = (Rm*self.R_earth/(R_star*self.R_sun))**2*1e6
        tdle = 2*(Rm*self.R_earth/(R_star*self.R_sun))**2*math.sqrt((Rle/Rm)**2 + (Rse/R_star)**2)*1e6
        tdue = 2*(Rm*self.R_earth/(R_star*self.R_sun))**2*math.sqrt((Rue/Rm)**2 + (Rse/R_star)**2)*1e6
        ntrans = 0
        ntl = 0
        ntu = 0

        for j in range(len(ik)):
            if math.cos(ik[j]*math.pi/180) < (R_star*self.R_sun + Rm*self.R_earth)/self.K3(Pm, M_star):
                ntrans += 1

            if math.cos(ik[j]*math.pi/180) < ((R_star - Rse)*self.R_sun + (Rm - Rle)*self.R_earth)/self.K3(Pm, (M_star + Mse)):
                ntl += 1

            if math.cos(ik[j]*math.pi/180) < ((R_star + Rse)*self.R_sun + (Rm + Rue)*self.R_earth)/self.K3(Pm, (M_star - Mse)):
                ntu += 1

        tpm = ntrans/len(ik)
        tple = ntrans/len(ik) - ntl/len(ik)
        tpue = ntu/len(ik) - ntrans/len(ik)

        if tple < 1e-3:
            tple = 1e-3

        if tpue < 1e-3:
            tpue = 1e-3

        if Pm > 10:
            Pm = round(Pm, 1)

        elif Pm < 1:
            Pm = round(Pm, 3)

        else:
            Pm = round(Pm, 2)

        if Pue > 10:
            Pue = round(Pue, 1)

        elif Pue < 1:
            Pue = round(Pue, 3)

        else:
            Pue = round(Pue, 2)

        if Ple > 10:
            Ple = round(Ple, 1)

        elif Ple < 1:
            Ple = round(Ple, 3)

        else:
            Ple = round(Ple, 2)

        if Rm < 1:
            Rm = round(Rm, 3)

        else:
            Rm = round(Rm, 2)

        if Rue < 1:
            Rue = round(Rue, 3)

        else:
            Rue = round(Rue, 2)

        if Rle < 1:
            Rle = round(Rle, 3)

        else:
            Rle = round(Rle, 2)

        if tdm > 1000:
            tdm = int(round(tdm/10, 0))*10

        else:
            tdm = int(round(tdm, 0))

        if tdue > 10000:
            tdue = int(round(tdue/100, 0))*100

        elif tdue > 1000:
            tdue = int(round(tdue/10, 0))*10

        else:
            tdue = int(round(tdue, 0))

        if tdle > 1000:
            tdle = int(round(tdle/10, 0))*10

        else:
            tdle = int(round(tdle, 0))

        tpm = round(tpm, 3)
        tpue = round(tpue, 3)
        tple = round(tple, 3)

        print("\t\t" + target_name + " & $" + str(Pm) + "^{" + str(Pue) + "}_{" + str(Ple) + "}$ & $" + str(Rm) + "^{" + str(Rue) + "}_{" + str(Rle) + "}$ & $" + str(R_star) + "\pm" + str(Rse) + "$ & $" + str(tdm) + "^{" + str(tdue) + "}_{" + str(tdle) + "}$ & $" + str(tpm) + "^{" + str(tpue) + "}_{" + str(tple) + "}$ \\\\")

        self.tdm.append(tdm)
        self.tdle.append(tdle)
        self.tdue.append(tdue)
        self.tpm.append(tpm)
        self.tpue.append(tpue)
        self.tple.append(tple)
        self.targets.append([target_name, Pm, Ple, Pue, Rm, Rle, Rue])



    def epos_pers(self, p0, per, rad, P, M_star):
        """Generates probability of periods using dimensionless spacing in period ratios from EPOS (Mulders et al. 2018)"""

        fP = np.zeros(len(P))
        fD = np.zeros(len(P))
        ind = 0

        for i in range(len(P)):
            if P[i] < p0:
                fP[i] = ((P[i]/12)**1.6 if P[i] < 12 else (P[i]/12)**-0.9)

            else:
                ind = i
                break

        #logD = -0.39       LOG_10 NUMBER
        #sigma = 0.18       LOG_10 NUMBER
        logD = -0.9
        sigma = 0.41

        PRgrid = np.logspace(0,1)

        with np.errstate(divide='ignore'):
            #Dgrid = np.log10(2.*(PRgrid**(2./3.)-1.)/(PRgrid**(2./3.)+1.))     LOG_10 FORMULA
            Dgrid = np.log(2.*(PRgrid**(2./3.)-1.)/(PRgrid**(2./3.)+1.))

        #Dgrid[0] = -2      LOG_10 NUMBER
        Dgrid[0] = -4

        pdfP = spst.norm(logD, sigma).pdf(Dgrid)
        cdfP = spst.norm(logD, sigma).cdf(Dgrid)

        for i in range(ind, len(fP)):
            for j in range(len(per)):
                if P[i] > per[j]:
                    fP[i] = np.interp(P[i]/per[j], PRgrid, pdfP)

                    if j < len(per) - 1 and P[i] < per[j+1]:
                        fP[i] *= np.interp(per[j+1]/P[i], PRgrid, pdfP)

                    elif j < len(per) - 1 and P[i] >= per[j+1]:
                        fP[i] = 0
                    
        m = np.zeros(len(per))

        for k in range(len(per)):
            m[k] = pfm(measurement=rad[k], predict='Mass', dataset='kepler')[0]

        for i in range(len(P)):
            for k in range(len(per)):
                m1 = m[k]
                m2 = np.mean(m)
                dc = 8
                a1 = self.K3(P[i], M_star) if P[i] < per[k] else self.K3(per[k], M_star)
                a2 = self.K3(per[k], M_star) if P[i] < per[k] else self.K3(P[i], M_star)
                fD[i] = 2*(a2 - a1)/(a2 + a1) * ((m1 + m2)*self.M_earth/(3*M_star*self.M_sun))**(-1/3)

                if fD[i] < dc:
                    fP[i] = 0

        Du = np.arange(0, max(fD) + self.DD, self.DD)
        fDu = np.zeros(len(Du))

        for i in range(len(fD)):
            j = int(fD[i] // self.DD)
            fDu[j] += fP[i]/np.trapz(fP, P)

        return fP/np.trapz(fP, P), fDu



    def syssim_pers(self, per, rad, P, M_star):
        """Generates probability of periods using clustered periods from He, Ford, and Ragozzine (2019)"""

        sigmap = 0.2
        Np = len(per)
        PR = [per[i]/per[i-1] for i in range(1,len(per))]
        bools = []
        bools_dict = {
            (0,):(1,[[1,2]]),
            (1,):(2,[[1],[2]]),
            (0,0):(1,[[1,2,3]]),
            (1,0):(2,[[1],[2,3]]),
            (0,1):(2,[[3],[1,2]]),
            (1,1):(3,[[1],[2],[3]]),
            (0,0,0):(1,[[1,2,3,4]]),
            (1,0,0):(2,[[1],[2,3,4]]),
            (0,1,0):(2,[[1,2],[3,4]]),
            (0,0,1):(2,[[1,2,3],[4]]),
            (1,1,0):(3,[[1],[2],[3,4]]),
            (1,0,1):(3,[[1],[2,3],[4]]),
            (0,1,1):(3,[[1,2],[3],[4]]),
            (1,1,1):(4,[[1],[2],[3],[4]])
            }

        for i in range(len(PR)):
            if PR[i] > spst.lognorm.ppf(0.95, Np*sigmap):
                bools.append(1)

            else:
                bools.append(0)

        Nc = bools_dict[tuple(bools)][0]
        Np = bools_dict[tuple(bools)][1]

        if Nc == 1:
            Pcb = 0
            Pcbs = []
            fPcb = []

            for i in range(len(P)):
                test = 0

                for k in range(len(per)):
                    test += spst.lognorm.pdf(per[k]/P[i], len(per)*sigmap)

                Pcbs.append(P[i])
                fPcb.append(test)

            Pcb = round(Pcbs[np.where(fPcb == max(fPcb))[0][0]], 1)

        else:
            Pcb = []

            for i in range(Nc):
                Pcbs = []
                fPcb = []

                for k in range(len(P)):
                    test = 0

                    for j in Np[i]:
                        test += spst.lognorm.pdf(per[j - 1]/P[k], len(Np[i])*sigmap)

                    Pcbs.append(P[k])
                    fPcb.append(test)

                Pcb.append(Pcbs[np.where(fPcb == max(fPcb))[0][0]])

            Pcb = np.array([round(Pcb[i], 1) for i in range(len(Pcb))])

        Pip = np.linspace(math.sqrt(min(P)/max(P)), math.sqrt(max(P)/min(P)), 1001)
        fPip = []

        for i in range(Nc):
            fPip.append(spst.lognorm.pdf(Pip, (len(per) if Nc == 1 else len(Np[i]))*sigmap))

        fP = np.zeros(len(P))
        fD = np.zeros(len(P))

        for i in range(len(fP)):
            f = []

            for j in range(Nc):
                f.append(np.interp(P[i], (Pcb if Nc == 1 else Pcb[j])*Pip, fPip[j]))

            fP[i] = max(f)

        m = np.zeros(len(per))

        for k in range(len(per)):
            m[k] = pfm(measurement=rad[k], predict='Mass', dataset='kepler')[0]

        for i in range(len(P)):
            for k in range(len(per)):
                m1 = m[k]
                m2 = np.mean(m)
                dc = 8
                a1 = self.K3(P[i], M_star) if P[i] < per[k] else self.K3(per[k], M_star)
                a2 = self.K3(per[k], M_star) if P[i] < per[k] else self.K3(P[i], M_star)
                fD[i] = 2*(a2 - a1)/(a2 + a1) * ((m1 + m2)*self.M_earth/(3*M_star*self.M_sun))**(-1/3)

                if fD[i] < dc:
                    fP[i] = 0

        Du = np.arange(0, max(fD) + self.DD, self.DD)
        fDu = np.zeros(len(Du))

        for i in range(len(fD)):
            j = int(fD[i] // self.DD)
            fDu[j] += fP[i]/np.trapz(fP, P)

        return fP/np.trapz(fP, P), fDu



    def epos_rads(self, r1, r2):
        """Generates probability of radius from uniform distribution between minimum and maximum planet radii in system (similar to same-R from Mulders et al. 2018)"""

        R = np.arange(r1, r2+0.01, 0.01)
        fR = np.ones(len(R))/(r2 - r1)
        cdfR = spst.uniform(r1, r2-r1).cdf(R)
    
        return R, fR/np.trapz(fR, R), cdfR



    def syssim_rads(self, Rcp, rad):
        """Generates probability of radius using powerlaw or clustered radii from He, Ford, and Ragozzine (2019)"""

        Rmin = 0.1 #0.5 for normal stats, 0.1 for reaching the smallest planets in TOI multi systems
        Rmax = 5   #5 for Neptunes and below, 10 for normal stats, 15 for largest super-Jupiter planets in TOI multi systems
        Rbreak = 3
        R = np.arange(Rmin, Rmax + 0.01, 0.01)
        pdfR = np.zeros(len(R))
        cdfR = np.zeros(len(R))

        if Rcp == "powerlaw":
            R1 = -1
            R2 = -5

            for i in range(len(R)):
                pdfR[i] = (R[i]/Rbreak)**R1 if R[i] < Rbreak else (R[i]/Rbreak)**R2

            pdfR = pdfR/np.trapz(pdfR, R)

        elif Rcp == "clustered":
            sigmaR = 0.3

            if len(rad) == 2:
                if rad[1] > spst.lognorm.ppf(0.95, sigmaR, scale=np.exp(np.log(rad[0] + sigmaR**2))) or rad[0] > spst.lognorm.ppf(0.95, sigmaR, scale=np.exp(np.log(rad[1] + sigmaR**2))):
                    Nc = 2
                    Np = [[1], [2]]

                else:
                    Nc = 1
                    Np = [[1, 2]]

            elif len(rad) == 3:
                allR = []

                for i in range(2):
                    for j in range(i + 1, 3):
                        if rad[j] > spst.lognorm.ppf(0.95, sigmaR, scale=np.exp(np.log(rad[i] + sigmaR**2))) or rad[i] > spst.lognorm.ppf(0.95, sigmaR, scale=np.exp(np.log(rad[j] + sigmaR**2))):
                            allR.append((i, j))

               
                allR_dict_3 = {
                    (()):(1,[[1,2,3]]),
                    ((0,1),):(1,[[1,2,3]]),
                    ((0,2),):(1,[[1,2,3]]),
                    ((1,2),):(1,[[1,2,3]]),
                    ((0,1),(0,2)):(2,[[1],[2,3]]),
                    ((0,1),(1,2)):(2,[[2],[1,3]]),
                    ((0,2),(1,2)):(2,[[3],[1,2]]),
                    ((0,1),(0,2),(1,2)):(3,[[1],[2],[3]])
                    }

                Nc = allR_dict_3[tuple(allR)][0]
                Np = allR_dict_3[tuple(allR)][1]

            elif len(rad) == 4:
                allR = []

                for i in range(3):
                    for j in range(i + 1, 4):
                        if rad[j] > spst.lognorm.ppf(0.95, sigmaR, scale=np.exp(np.log(rad[i] + sigmaR**2))) or rad[i] > spst.lognorm.ppf(0.95, sigmaR, scale=np.exp(np.log(rad[j] + sigmaR**2))):
                            allR.append((i, j))

                allR_dict_4 = {
                    (()):(1,[[1,2,3,4]]),
                    ((0,1),):(1,[[1,2,3,4]]),
                    ((0,2),):(1,[[1,2,3,4]]),
                    ((0,3),):(1,[[1,2,3,4]]),
                    ((1,2),):(1,[[1,2,3,4]]),
                    ((1,3),):(1,[[1,2,3,4]]),
                    ((2,3),):(1,[[1,2,3,4]]),
                    ((0,1),(0,2)):(1,[[1,2,3,4]]),
                    ((0,1),(0,3)):(1,[[1,2,3,4]]),
                    ((0,1),(1,2)):(1,[[1,2,3,4]]),
                    ((0,1),(1,3)):(1,[[1,2,3,4]]),
                    ((0,1),(2,3)):(1,[[1,2,3,4]]),
                    ((0,2),(0,3)):(1,[[1,2,3,4]]),
                    ((0,2),(1,2)):(1,[[1,2,3,4]]),
                    ((0,2),(1,3)):(1,[[1,2,3,4]]),
                    ((0,2),(2,3)):(1,[[1,2,3,4]]),
                    ((0,3),(1,2)):(1,[[1,2,3,4]]),
                    ((0,3),(1,3)):(1,[[1,2,3,4]]),
                    ((0,3),(2,3)):(1,[[1,2,3,4]]),
                    ((1,2),(1,3)):(1,[[1,2,3,4]]),
                    ((1,2),(2,3)):(1,[[1,2,3,4]]),
                    ((1,3),(2,3)):(1,[[1,2,3,4]]),
                    ((0,1),(0,2),(0,3)):(2,[[1],[2,3,4]]),
                    ((0,1),(0,2),(1,2)):(1,[[1,2,3,4]]),
                    ((0,1),(0,2),(1,3)):(1,[[1,2,3,4]]),
                    ((0,1),(0,2),(2,3)):(1,[[1,2,3,4]]),
                    ((0,1),(0,3),(1,2)):(1,[[1,2,3,4]]),
                    ((0,1),(0,3),(1,3)):(1,[[1,2,3,4]]),
                    ((0,1),(0,3),(2,3)):(1,[[1,2,3,4]]),
                    ((0,1),(1,2),(1,3)):(2,[[2],[1,3,4]]),
                    ((0,1),(1,2),(2,3)):(1,[[1,2,3,4]]),
                    ((0,1),(1,3),(2,3)):(1,[[1,2,3,4]]),
                    ((0,2),(0,3),(1,2)):(1,[[1,2,3,4]]),
                    ((0,2),(0,3),(1,3)):(1,[[1,2,3,4]]),
                    ((0,2),(0,3),(2,3)):(1,[[1,2,3,4]]),
                    ((0,2),(1,2),(1,3)):(1,[[1,2,3,4]]),
                    ((0,2),(1,2),(2,3)):(2,[[3],[1,2,4]]),
                    ((0,2),(1,3),(2,3)):(1,[[1,2,3,4]]),
                    ((0,3),(1,2),(1,3)):(1,[[1,2,3,4]]),
                    ((0,3),(1,2),(2,3)):(1,[[1,2,3,4]]),
                    ((0,3),(1,3),(2,3)):(2,[[4],[1,2,3]]),
                    ((1,2),(1,3),(2,3)):(1,[[1,2,3,4]]),
                    ((0,1),(0,2),(0,3),(1,2)):(2,[[1],[2,3,4]]),
                    ((0,1),(0,2),(0,3),(1,3)):(2,[[1],[2,3,4]]),
                    ((0,1),(0,2),(0,3),(2,3)):(2,[[1],[2,3,4]]),
                    ((0,1),(0,2),(1,2),(1,3)):(2,[[2],[1,3,4]]),
                    ((0,1),(0,2),(1,2),(2,3)):(2,[[3],[1,2,4]]),
                    ((0,1),(0,2),(1,3),(2,3)):(2,[[1,4],[2,3]]),
                    ((0,1),(0,3),(1,2),(1,3)):(2,[[2],[1,3,4]]),
                    ((0,1),(0,3),(1,2),(2,3)):(2,[[1,3],[2,4]]),
                    ((0,1),(0,3),(1,3),(2,3)):(2,[[4],[1,2,3]]),
                    ((0,1),(1,2),(1,3),(2,3)):(2,[[2],[1,3,4]]),
                    ((0,2),(0,3),(1,2),(1,3)):(2,[[1,2],[3,4]]),
                    ((0,2),(0,3),(1,2),(2,3)):(2,[[3],[1,2,4]]),
                    ((0,2),(0,3),(1,3),(2,3)):(2,[[4],[1,2,3]]),
                    ((0,2),(1,2),(1,3),(2,3)):(2,[[3],[1,2,4]]),
                    ((0,3),(1,2),(1,3),(2,3)):(2,[[4],[1,2,3]]),
                    ((0,1),(0,2),(0,3),(1,2),(1,3)):(3,[[1],[2],[3,4]]),
                    ((0,1),(0,2),(0,3),(1,2),(2,3)):(3,[[1],[3],[2,4]]),
                    ((0,1),(0,2),(0,3),(1,3),(2,3)):(3,[[1],[4],[2,3]]),
                    ((0,1),(0,2),(1,2),(1,3),(2,3)):(3,[[2],[3],[1,4]]),
                    ((0,1),(0,3),(1,2),(1,3),(2,3)):(3,[[2],[4],[1,3]]),
                    ((0,2),(0,3),(1,2),(1,3),(2,3)):(3,[[3],[4],[1,2]]),
                    ((0,1),(0,2),(0,3),(1,2),(1,3),(2,3)):(4,[[1],[2],[3],[4]])
                    }

                Nc = allR_dict_4[tuple(allR)][0]
                Np = allR_dict_4[tuple(allR)][1]

            if Nc == 1:
                Rcbs = []
                fRcb = []

                for i in range(len(R)):
                    test = 0

                    for j in range(len(rad)):
                        test += spst.lognorm.pdf(rad[j], sigmaR, scale=np.exp(R[i]))

                    Rcbs.append(R[i])
                    fRcb.append(test)

                Rcb = round(Rcbs[np.where(fRcb == max(fRcb))[0][0]], 2)

            else:
                Rcb = []

                for i in range(Nc):
                    Rcbs = []
                    fRcb = []

                    for k in range(len(R)):
                        test = 0

                        for j in Np[i]:
                            test += spst.lognorm.pdf(rad[j - 1], sigmaR, scale=np.exp(R[k]))

                        Rcbs.append(R[k])
                        fRcb.append(test)

                    Rcb.append(Rcbs[np.where(fRcb == max(fRcb))[0][0]])

                Rcb = np.array([round(Rcb[i], 2) for i in range(len(Rcb))])

            fRi = []

            for i in range(Nc):
                fRi.append(spst.lognorm.pdf(R, sigmaR, scale=np.exp(Rcb) if Nc == 1 else np.exp(Rcb[i])))

            for i in range(len(R)):
                pdfR[i] = max([fRi[j][i] for j in range(len(fRi))])

        for i in range(len(R)):
            cdfR[i] = np.trapz(pdfR[:i + 1], R[:i + 1])/np.trapz(pdfR, R)

        return R, pdfR/np.trapz(pdfR, R), cdfR



    def K3(self, P, M):
        """Calculates semi-major axis in cm using period in days and mass in solar masses"""

        return (self.G*(M*self.M_sun)*(P*self.seconds_per_day)**2/(4*math.pi**2))**(1/3)

dynamite()
