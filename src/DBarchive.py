### DYNAmical Multi-planet Injection TEster (DYNAMITE) ###
### Database Creation from Archive File ###
### Main Author: Jamie Dietrich ###
### Contact: jdietrich@asu.edu ###
### Contributing Authors: Ritvik Basant, Katelyn Ruppert ###
### 2025 July 9 ###
### Version 3.1 ###
### Dietrich & Apai (2020), AJ, 160, 107D ###
### https://iopscience.iop.org/article/10.3847/1538-3881/aba61d ###
### Dietrich & Apai (2021), AJ, 161, 17D ###
### Dietrich, Apai, & Malhotra (2022), AJ, 163, 88D ###
### Basant, Dietrich, & Apai (2022), AJ, 164, 12B ###
### Basant, Dietrich, & Apai (2022), RNAAS, 6, 213 ###
### Dietrich (2024), AJ, 168, 119 ###

import os
import csv
import ast
import sys
import glob
import shutil
import sqlite3
import requests
import traceback
import numpy as np

from string import Template
from datetime import datetime

class DBarchive:

    exoPlanetCSV = "exoplanetarchive_"
    exoPlanetArchiveURL = "https://exoplanetarchive.ipac.caltech.edu/TAP/sync?query=select+tic_id,hostname,st_rad,st_raderr1,st_raderr2,st_mass,st_masserr1,st_masserr2,st_teff,st_tefferr1,st_tefferr2,sy_dist,pl_letter,pl_orbper,pl_orbpererr1,pl_orbpererr2,pl_rade,pl_radeerr1,pl_radeerr2,pl_bmasse,pl_bmasseerr1,pl_bmasseerr2,pl_bmassprov,pl_orbincl,pl_orbinclerr1,pl_orbinclerr2,pl_orbeccen,pl_orbeccenerr1,pl_orbeccenerr2,tran_flag,pl_tranmid,pl_tranmiderr1,pl_tranmiderr2+from+ps+where+default_flag=1&format=csv"
    exoPlanetArchiveURL2 = "https://exoplanetarchive.ipac.caltech.edu/TAP/sync?query=select+tic_id,hostname,st_rad,st_raderr1,st_raderr2,st_mass,st_masserr1,st_masserr2,st_teff,st_tefferr1,st_tefferr2,sy_dist,pl_letter,pl_orbper,pl_orbpererr1,pl_orbpererr2,pl_rade,pl_radeerr1,pl_radeerr2,pl_bmasse,pl_bmasseerr1,pl_bmasseerr2,pl_bmassprov,pl_orbincl,pl_orbinclerr1,pl_orbinclerr2,pl_orbeccen,pl_orbeccenerr1,pl_orbeccenerr2,tran_flag,pl_tranmid,pl_tranmiderr1,pl_tranmiderr2+from+pscomppars&format=csv"
    exoPlanetArchiveURL3 = "https://exoplanetarchive.ipac.caltech.edu/TAP/sync?query=select+tid,toipfx,st_rad,st_raderr1,st_raderr2,st_teff,st_tefferr1,st_tefferr2,st_dist,toi,pl_orbper,pl_orbpererr1,pl_orbpererr2,pl_rade,pl_radeerr1,pl_radeerr2,pl_tranmid,pl_tranmiderr1,pl_tranmiderr2+from+toi&format=csv"

    exoFopCSV = "exofop_"
    exofopArchiveURL = "https://exofop.ipac.caltech.edu/tess/download_toi.php?sort=toi&output=csv"

    hypatiaCSV = "hypatia_"
    hypatiaArchiveURL = "https://www.hypatiacatalog.com/hypatia/default/table.csv/hypatia-" + datetime.today().strftime("%d%m%Y") + ".csv?download=true"
    
    csv_adjustments = None
    csv_comppars = None
    csv_toi = None
    excludeList = [("TOI-2076", "02"), ("TOI-696", "03")]

    dbattr_target = []  # list of target attribute names in order defined in database table
    dbattr_planet = []  # list of planet attribute names in order defined in database table
    dbcsvmap = {}       # (key, value): ( (database attribute name, datasource), csvcolumn name)
    csvtargets = {}     # (key, value): (target name from csv, target tuple from csv)
    csvplanets = {}     # (key, value): ( (target name, planet name), planet tuple from csv)
    csvelements = {}    # (key, value): (target name from csv, element tuple from csv)

    insert_target_template = Template("insert into target values('$tname', '$tic_id', '$alt_name', $sr, $sru, $srl, $sm, $smu, $sml, $st, $stu, $stl, $dist)") 
    insert_planet_template = Template("insert into planet values('$tname', '$pname', '$alt_name', $p, $pu, $pl, $pr, $pru, $prl, $pm, $pmu, $pml, '$pmt', $pi, $piu, $pil, $pe, $peu, $pel, $tr, $t0, $t0u, $t0l)")
    select_planet_template = Template("select * from planet where tname='$tname' and pname='$pname'")
    select_pname_template = Template("select pname from planet where tname='$tname'")
    select_target_template = Template("select * from target where tname='$tname'")
    select_tic_id_template = Template("select tic_id from target where tic_id='$tic_id'")
    select_alt_name_template = Template("select tname, alt_name from target where tic_id='$tic_id'")
    insert_dbcsv_template = Template("insert into dbcsvmap values('$dbattr', '$datasource', $csvcolumn)")
    insert_isochrones_template = Template("insert into isochrones values($age,$smass,$stemp,$slum,$inner_hz,$outer_hz)") 
    update_target_template = Template("update target set $attr=$value where tname='$tname'")
    update_planet_template = Template("update planet set $attr=$value where tname='$tname' and pname='$pname'")
    select_planet_periods_template = Template("select period, pname from planet where tname='$tname'")
    insert_element_template = Template("insert into element values('$tname', $fe, $c, $o)")
    select_element_template = Template("select * from element where tname='$tname'")
    update_element_template = Template("update element set $attr=$value where tname='$tname'")
    
    dbcsv = [('tname','exoplanetarchive','hostname'),('tic_id','exoplanetarchive','tic_id'), ('sradius','exoplanetarchive','st_rad'),('sradius_unc_upper','exoplanetarchive','st_raderr1'),('sradius_unc_lower','exoplanetarchive','st_raderr2'),('smass','exoplanetarchive','st_mass'),('smass_unc_upper','exoplanetarchive','st_masserr1'),('smass_unc_lower','exoplanetarchive','st_masserr2'),('stemp','exoplanetarchive','st_teff'),('stemp_unc_upper','exoplanetarchive','st_tefferr1'),('stemp_unc_lower','exoplanetarchive','st_tefferr2'),('distance','exoplanetarchive','sy_dist'),('pname','exoplanetarchive','pl_letter'),('period','exoplanetarchive','pl_orbper'),('period_unc_upper','exoplanetarchive','pl_orbpererr1'),('period_unc_lower','exoplanetarchive','pl_orbpererr2'),('pradius','exoplanetarchive','pl_rade'),('pradius_unc_upper','exoplanetarchive','pl_radeerr1'),('pradius_unc_lower','exoplanetarchive','pl_radeerr2'),('pmass','exoplanetarchive','pl_bmasse'),('pmass_unc_upper','exoplanetarchive','pl_bmasseerr1'),('pmass_unc_lower','exoplanetarchive','pl_bmasseerr2'),('pmass_type','exoplanetarchive','pl_bmassprov'),('pinc','exoplanetarchive','pl_orbincl'),('pinc_unc_upper','exoplanetarchive','pl_orbinclerr1'),('pinc_unc_lower','exoplanetarchive','pl_orbinclerr2'),('pecc','exoplanetarchive','pl_orbeccen'),('pecc_unc_upper','exoplanetarchive','pl_orbeccenerr1'),('pecc_unc_lower','exoplanetarchive','pl_orbeccenerr2'),('t0','exoplanetarchive','pl_tranmid'),('t0_unc_upper','exoplanetarchive','pl_tranmiderr1'),('t0_unc_lower','exoplanetarchive','pl_tranmiderr2'),('ttv_limit','exoplanetarchive',None),('tic_id','exofop','TIC ID'),('tname','exofop','TOI'),('sradius','exofop','Stellar Radius (R_Sun)'),('sradius_unc_upper','exofop','Stellar Radius (R_Sun) err'),('sradius_unc_lower','exofop','Stellar Radius (R_Sun) err'),('smass','exofop','Stellar Mass (M_Sun)'),('smass_unc_upper','exofop','Stellar Mass (M_Sun) err'),('smass_unc_lower','exofop','Stellar Mass (M_Sun) err'),('stemp','exofop','Stellar Eff Temp (K)'),('stemp_unc_upper','exofop','Stellar Eff Temp (K) err'),('stemp_unc_lower','exofop','Stellar Eff Temp (K) err'),('distance','exofop','Stellar Distance (pc)'),('pname','exofop','TOI'),('period','exofop','Period (days)'),('period_unc_upper','exofop','Period (days) err'),('period_unc_lower','exofop','Period (days) err'),('pradius','exofop','Planet Radius (R_Earth)'),('pradius_unc_upper','exofop','Planet Radius (R_Earth) err'),('pradius_unc_lower','exofop','Planet Radius (R_Earth) err'),('pmass','exofop','Predicted Mass (M_Earth)'),('pmass_unc_upper','exofop',None),('pmass_unc_lower','exofop',None),('pmass_type','exofop',None),('pinc','exofop',None),('pinc_unc_upper','exofop',None),('pinc_unc_lower','exofop',None),('pecc','exofop',None),('pecc_unc_upper','exofop',None),('pecc_unc_lower','exofop',None), ('t0','exofop','Epoch (BJD)'),('t0_unc_upper','exofop','Epoch (BJD) err'),('t0_unc_lower','exofop','Epoch (BJD) err'),('ttv_limit','exofop',None),('fe','hypatia',None),('c','hypatia',None),('o','hypatia',None),('transit','exoplanetarchive','tran_flag')]
    isochrones = [(0.0005,0.01,2387.0,-2.47,0.061,0.125),(0.0005,0.015,2514.0,-2.21,0.082,0.167),(0.0005,0.02,2594.0,-2.05,0.099,0.2),(0.0005,0.03,2668.0,-1.79,0.133,0.269),(0.0005,0.04,2733.0,-1.66,0.155,0.311),(0.0005,0.05,2762.0,-1.48,0.19,0.382),(0.0005,0.06,2808.0,-1.4,0.208,0.418),(0.0005,0.07,2835.0,-1.33,0.226,0.452),(0.0005,0.072,2832.0,-1.29,0.236,0.473),(0.0005,0.075,2836.0,-1.27,0.242,0.484),(0.0005,0.08,2837.0,-1.2,0.262,0.525),(0.0005,0.09,2864.0,-1.13,0.284,0.569),(0.0005,0.1,2925.0,-1.15,0.277,0.554),(0.0005,0.11,2945.0,-1.07,0.304,0.606),(0.0005,0.13,3006.0,-0.93,0.357,0.71),(0.0005,0.15,3076.0,-0.79,0.419,0.831),(0.0005,0.17,3139.0,-0.67,0.481,0.95),(0.0005,0.2,3220.0,-0.54,0.558,1.099),(0.0005,0.3,3460.0,-0.2,0.823,1.602),(0.0005,0.4,3670.0,-0.05,0.976,1.881),(0.0005,0.5,3848.0,0.07,1.117,2.134),(0.0005,0.6,3987.0,0.16,1.236,2.344),(0.0005,0.7,4110.0,0.26,1.382,2.606),(0.0005,0.8,4221.0,0.35,1.529,2.864),(0.0005,0.9,4315.0,0.43,1.672,3.117),(0.0005,1.0,4397.0,0.5,1.808,3.361),(0.0005,1.1,4471.0,0.57,1.954,3.617),(0.0005,1.2,4537.0,0.63,2.089,3.855),(0.0005,1.3,4596.0,0.68,2.208,4.063),(0.0005,1.4,4647.0,0.74,2.362,4.338),(0.001,0.01,2345.0,-2.7,0.047,0.096),(0.001,0.015,2504.0,-2.42,0.065,0.131),(0.001,0.02,2598.0,-2.25,0.078,0.159),(0.001,0.03,2710.0,-1.98,0.107,0.215),(0.001,0.04,2779.0,-1.81,0.13,0.261),(0.001,0.05,2824.0,-1.65,0.156,0.313),(0.001,0.06,2864.0,-1.53,0.179,0.359),(0.001,0.07,2897.0,-1.41,0.206,0.411),(0.001,0.072,2896.0,-1.39,0.21,0.421),(0.001,0.075,2897.0,-1.36,0.218,0.436),(0.001,0.08,2898.0,-1.31,0.231,0.461),(0.001,0.09,2908.0,-1.23,0.253,0.505),(0.001,0.1,2936.0,-1.17,0.271,0.541),(0.001,0.11,2955.0,-1.1,0.294,0.585),(0.001,0.13,3012.0,-0.96,0.345,0.686),(0.001,0.15,3078.0,-0.85,0.391,0.775),(0.001,0.17,3142.0,-0.73,0.449,0.886),(0.001,0.2,3226.0,-0.66,0.486,0.957),(0.001,0.3,3428.0,-0.48,0.597,1.163),(0.001,0.4,3634.0,-0.32,0.715,1.381),(0.001,0.5,3802.0,-0.18,0.838,1.603),(0.001,0.6,3955.0,-0.07,0.949,1.802),(0.001,0.7,4078.0,0.04,1.074,2.026),(0.001,0.8,4192.0,0.13,1.188,2.227),(0.001,0.9,4290.0,0.21,1.299,2.424),(0.001,1.0,4377.0,0.28,1.404,2.613),(0.001,1.1,4456.0,0.35,1.518,2.813),(0.001,1.2,4529.0,0.41,1.622,2.998),(0.001,1.3,4596.0,0.47,1.734,3.19),(0.001,1.4,4658.0,0.52,1.832,3.362),(0.002,0.01,2236.0,-2.96,0.035,0.072),(0.002,0.015,2452.0,-2.65,0.05,0.101),(0.002,0.02,2571.0,-2.46,0.062,0.125),(0.002,0.03,2707.0,-2.14,0.089,0.179),(0.002,0.04,2784.0,-1.9,0.117,0.235),(0.002,0.05,2829.0,-1.72,0.144,0.288),(0.002,0.06,2867.0,-1.58,0.169,0.338),(0.002,0.07,2902.0,-1.45,0.196,0.393),(0.002,0.072,2907.0,-1.43,0.201,0.401),(0.002,0.075,2914.0,-1.4,0.208,0.415),(0.002,0.08,2924.0,-1.35,0.22,0.44),(0.002,0.09,2934.0,-1.26,0.244,0.488),(0.002,0.1,2972.0,-1.26,0.244,0.487),(0.002,0.11,2996.0,-1.21,0.259,0.514),(0.002,0.13,3034.0,-1.15,0.277,0.55),(0.002,0.15,3076.0,-1.1,0.293,0.581),(0.002,0.17,3126.0,-1.02,0.321,0.636),(0.002,0.2,3202.0,-0.96,0.344,0.679),(0.002,0.3,3428.0,-0.72,0.453,0.882),(0.002,0.4,3606.0,-0.55,0.549,1.062),(0.002,0.5,3763.0,-0.41,0.644,1.235),(0.002,0.6,3906.0,-0.29,0.737,1.404),(0.002,0.7,4033.0,-0.18,0.834,1.579),(0.002,0.8,4153.0,-0.09,0.923,1.735),(0.002,0.9,4259.0,0.0,1.021,1.91),(0.002,1.0,4350.0,0.07,1.103,2.056),(0.002,1.1,4432.0,0.14,1.193,2.212),(0.002,1.2,4508.0,0.2,1.275,2.358),(0.002,1.3,4581.0,0.26,1.362,2.509),(0.002,1.4,4653.0,0.32,1.456,2.675),(0.003,0.01,2142.0,-3.13,0.029,0.059),(0.003,0.015,2406.0,-2.79,0.042,0.086),(0.003,0.02,2545.0,-2.57,0.054,0.11),(0.003,0.03,2706.0,-2.17,0.086,0.173),(0.003,0.04,2784.0,-1.92,0.114,0.23),(0.003,0.05,2831.0,-1.74,0.141,0.282),(0.003,0.06,2870.0,-1.61,0.163,0.327),(0.003,0.07,2906.0,-1.51,0.183,0.366),(0.003,0.072,2911.0,-1.49,0.188,0.374),(0.003,0.075,2919.0,-1.46,0.194,0.387),(0.003,0.08,2931.0,-1.42,0.203,0.406),(0.003,0.09,2956.0,-1.36,0.218,0.434),(0.003,0.1,2998.0,-1.44,0.198,0.395),(0.003,0.11,3016.0,-1.39,0.21,0.418),(0.003,0.13,3052.0,-1.32,0.228,0.452),(0.003,0.15,3088.0,-1.25,0.247,0.489),(0.003,0.17,3127.0,-1.18,0.267,0.529),(0.003,0.2,3196.0,-1.1,0.293,0.578),(0.003,0.3,3404.0,-0.86,0.385,0.752),(0.003,0.4,3582.0,-0.68,0.473,0.914),(0.003,0.5,3731.0,-0.54,0.555,1.066),(0.003,0.6,3868.0,-0.42,0.635,1.212),(0.003,0.7,3998.0,-0.31,0.719,1.362),(0.003,0.8,4120.0,-0.21,0.804,1.514),(0.003,0.9,4232.0,-0.13,0.879,1.648),(0.003,1.0,4330.0,-0.05,0.962,1.794),(0.003,1.1,4421.0,0.02,1.039,1.93),(0.003,1.2,4505.0,0.09,1.123,2.078),(0.003,1.3,4588.0,0.15,1.2,2.211),(0.003,1.4,4671.0,0.22,1.297,2.38),(0.004,0.01,2053.0,-3.27,0.025,0.051),(0.004,0.015,2362.0,-2.89,0.038,0.077),(0.004,0.02,2535.0,-2.61,0.052,0.105),(0.004,0.03,2705.0,-2.19,0.084,0.169),(0.004,0.04,2785.0,-1.95,0.111,0.222),(0.004,0.05,2834.0,-1.78,0.134,0.269),(0.004,0.06,2875.0,-1.68,0.151,0.301),(0.004,0.07,2914.0,-1.64,0.158,0.315),(0.004,0.072,2921.0,-1.63,0.16,0.319),(0.004,0.075,2931.0,-1.61,0.163,0.326),(0.004,0.08,2946.0,-1.58,0.169,0.337),(0.004,0.09,2976.0,-1.53,0.179,0.357),(0.004,0.1,3013.0,-1.55,0.175,0.348),(0.004,0.11,3035.0,-1.51,0.183,0.363),(0.004,0.13,3075.0,-1.42,0.203,0.402),(0.004,0.15,3113.0,-1.35,0.22,0.435),(0.004,0.17,3145.0,-1.27,0.241,0.476),(0.004,0.2,3206.0,-1.19,0.264,0.521),(0.004,0.3,3389.0,-0.95,0.347,0.678),(0.004,0.4,3560.0,-0.78,0.422,0.816),(0.004,0.5,3704.0,-0.63,0.5,0.963),(0.004,0.6,3842.0,-0.51,0.573,1.094),(0.004,0.7,3976.0,-0.4,0.649,1.23),(0.004,0.8,4096.0,-0.3,0.726,1.368),(0.004,0.9,4212.0,-0.22,0.793,1.488),(0.004,1.0,4315.0,-0.14,0.867,1.617),(0.004,1.1,4417.0,-0.06,0.948,1.761),(0.004,1.2,4513.0,0.02,1.036,1.913),(0.004,1.3,4609.0,0.09,1.119,2.06),(0.004,1.4,4710.0,0.16,1.208,2.214),(0.005,0.01,1961.0,-3.39,0.022,0.045),(0.005,0.015,2330.0,-2.96,0.035,0.071),(0.005,0.02,2531.0,-2.62,0.051,0.104),(0.005,0.03,2705.0,-2.2,0.083,0.167),(0.005,0.04,2785.0,-1.98,0.107,0.215),(0.005,0.05,2841.0,-1.85,0.124,0.248),(0.005,0.06,2890.0,-1.81,0.13,0.259),(0.005,0.07,2928.0,-1.76,0.137,0.274),(0.005,0.072,2934.0,-1.75,0.139,0.277),(0.005,0.075,2944.0,-1.73,0.142,0.283),(0.005,0.08,2959.0,-1.69,0.149,0.297),(0.005,0.09,2992.0,-1.64,0.158,0.314),(0.005,0.1,3027.0,-1.63,0.159,0.317),(0.005,0.11,3052.0,-1.58,0.169,0.335),(0.005,0.13,3098.0,-1.49,0.187,0.37),(0.005,0.15,3136.0,-1.41,0.205,0.405),(0.005,0.17,3169.0,-1.34,0.222,0.439),(0.005,0.2,3220.0,-1.26,0.244,0.48),(0.005,0.3,3379.0,-1.02,0.321,0.627),(0.005,0.4,3546.0,-0.84,0.394,0.763),(0.005,0.5,3696.0,-0.7,0.462,0.888),(0.005,0.6,3830.0,-0.57,0.535,1.021),(0.005,0.7,3960.0,-0.47,0.599,1.137),(0.005,0.8,4081.0,-0.37,0.67,1.264),(0.005,0.9,4198.0,-0.28,0.741,1.389),(0.005,1.0,4310.0,-0.2,0.81,1.509),(0.005,1.1,4422.0,-0.12,0.885,1.643),(0.005,1.2,4531.0,-0.03,0.977,1.806),(0.005,1.3,4644.0,0.05,1.067,1.96),(0.005,1.4,4771.0,0.14,1.178,2.152),(0.008,0.01,1714.0,-3.7,0.015,0.032),(0.008,0.015,2280.0,-3.05,0.031,0.065),(0.008,0.02,2525.0,-2.65,0.05,0.101),(0.008,0.03,2699.0,-2.29,0.075,0.151),(0.008,0.04,2784.0,-2.22,0.081,0.163),(0.008,0.05,2849.0,-2.13,0.09,0.18),(0.008,0.06,2903.0,-2.05,0.098,0.197),(0.008,0.07,2948.0,-1.97,0.108,0.215),(0.008,0.072,2956.0,-1.96,0.109,0.217),(0.008,0.075,2968.0,-1.93,0.113,0.225),(0.008,0.08,2986.0,-1.89,0.118,0.235),(0.008,0.09,3017.0,-1.83,0.127,0.252),(0.008,0.1,3045.0,-1.8,0.131,0.26),(0.008,0.11,3069.0,-1.74,0.14,0.278),(0.008,0.13,3115.0,-1.64,0.157,0.312),(0.008,0.15,3155.0,-1.56,0.173,0.341),(0.008,0.17,3192.0,-1.48,0.189,0.373),(0.008,0.2,3234.0,-1.4,0.207,0.408),(0.008,0.3,3364.0,-1.17,0.27,0.527),(0.008,0.4,3518.0,-0.99,0.331,0.642),(0.008,0.5,3669.0,-0.84,0.393,0.757),(0.008,0.6,3798.0,-0.72,0.45,0.861),(0.008,0.7,3923.0,-0.61,0.51,0.97),(0.008,0.8,4049.0,-0.51,0.57,1.078),(0.008,0.9,4184.0,-0.41,0.638,1.198),(0.008,1.0,4327.0,-0.3,0.721,1.345),(0.008,1.1,4481.0,-0.2,0.805,1.491),(0.008,1.2,4647.0,-0.09,0.908,1.668),(0.008,1.3,4837.0,0.04,1.047,1.905),(0.008,1.4,5064.0,0.18,1.217,2.196),(0.01,0.01,1570.0,-3.87,0.013,0.027),(0.01,0.015,2261.0,-3.08,0.03,0.062),(0.01,0.02,2519.0,-2.67,0.048,0.098),(0.01,0.03,2682.0,-2.43,0.064,0.129),(0.01,0.04,2768.0,-2.35,0.07,0.14),(0.01,0.05,2843.0,-2.23,0.08,0.16),(0.01,0.06,2900.0,-2.15,0.088,0.175),(0.01,0.07,2946.0,-2.06,0.097,0.194),(0.01,0.072,2954.0,-2.04,0.1,0.198),(0.01,0.075,2967.0,-2.02,0.102,0.203),(0.01,0.08,2987.0,-1.98,0.107,0.212),(0.01,0.09,3021.0,-1.91,0.115,0.229),(0.01,0.1,3050.0,-1.87,0.121,0.24),(0.01,0.11,3075.0,-1.82,0.128,0.254),(0.01,0.13,3118.0,-1.72,0.144,0.284),(0.01,0.15,3159.0,-1.64,0.157,0.311),(0.01,0.17,3197.0,-1.56,0.172,0.34),(0.01,0.2,3240.0,-1.47,0.191,0.377),(0.01,0.3,3363.0,-1.23,0.252,0.492),(0.01,0.4,3508.0,-1.05,0.309,0.601),(0.01,0.5,3651.0,-0.91,0.363,0.699),(0.01,0.6,3781.0,-0.79,0.416,0.796),(0.01,0.7,3908.0,-0.67,0.476,0.905),(0.01,0.8,4041.0,-0.57,0.533,1.006),(0.01,0.9,4191.0,-0.46,0.602,1.129),(0.01,1.0,4363.0,-0.34,0.688,1.28),(0.01,1.1,4553.0,-0.21,0.794,1.466),(0.01,1.2,4768.0,-0.07,0.925,1.69),(0.01,1.3,5038.0,0.09,1.098,1.986),(0.01,1.4,5363.0,0.29,1.36,2.427),(0.015,0.015,2237.0,-3.11,0.029,0.06),(0.015,0.02,2495.0,-2.74,0.045,0.091),(0.015,0.03,2614.0,-2.69,0.047,0.096),(0.015,0.04,2721.0,-2.55,0.055,0.112),(0.015,0.05,2827.0,-2.41,0.065,0.13),(0.015,0.06,2892.0,-2.3,0.074,0.148),(0.015,0.07,2943.0,-2.21,0.082,0.163),(0.015,0.072,2952.0,-2.19,0.084,0.167),(0.015,0.075,2965.0,-2.17,0.086,0.171),(0.015,0.08,2986.0,-2.13,0.09,0.178),(0.015,0.09,3023.0,-2.06,0.097,0.193),(0.015,0.1,3056.0,-2.01,0.103,0.204),(0.015,0.11,3086.0,-1.95,0.11,0.219),(0.015,0.13,3131.0,-1.84,0.125,0.247),(0.015,0.15,3169.0,-1.76,0.137,0.271),(0.015,0.17,3205.0,-1.68,0.15,0.296),(0.015,0.2,3252.0,-1.59,0.167,0.327),(0.015,0.3,3374.0,-1.34,0.222,0.434),(0.015,0.4,3498.0,-1.17,0.269,0.523),(0.015,0.5,3621.0,-1.03,0.316,0.61),(0.015,0.6,3748.0,-0.91,0.362,0.695),(0.015,0.7,3891.0,-0.78,0.419,0.799),(0.015,0.8,4054.0,-0.65,0.486,0.917),(0.015,0.9,4263.0,-0.51,0.567,1.06),(0.015,1.0,4530.0,-0.35,0.676,1.25),(0.015,1.1,4850.0,-0.15,0.841,1.531),(0.015,1.2,5264.0,0.09,1.086,1.946),(0.015,1.3,5754.0,0.4,1.509,2.664),(0.015,1.4,6422.0,0.7,2.047,3.562),(0.02,0.015,2209.0,-3.15,0.028,0.058),(0.02,0.02,2411.0,-2.92,0.036,0.074),(0.02,0.03,2555.0,-2.84,0.04,0.081),(0.02,0.04,2681.0,-2.68,0.048,0.096),(0.02,0.05,2811.0,-2.52,0.057,0.115),(0.02,0.06,2883.0,-2.41,0.065,0.13),(0.02,0.07,2940.0,-2.31,0.073,0.146),(0.02,0.072,2950.0,-2.29,0.075,0.149),(0.02,0.075,2964.0,-2.27,0.076,0.152),(0.02,0.08,2986.0,-2.22,0.081,0.161),(0.02,0.09,3025.0,-2.15,0.088,0.174),(0.02,0.1,3059.0,-2.1,0.093,0.184),(0.02,0.11,3090.0,-2.03,0.101,0.199),(0.02,0.13,3141.0,-1.93,0.113,0.223),(0.02,0.15,3182.0,-1.84,0.125,0.246),(0.02,0.17,3215.0,-1.77,0.135,0.267),(0.02,0.2,3263.0,-1.67,0.152,0.298),(0.02,0.3,3392.0,-1.42,0.202,0.395),(0.02,0.4,3500.0,-1.25,0.246,0.477),(0.02,0.5,3609.0,-1.11,0.288,0.557),(0.02,0.6,3733.0,-0.98,0.334,0.642),(0.02,0.7,3894.0,-0.85,0.387,0.737),(0.02,0.8,4102.0,-0.69,0.463,0.873),(0.02,0.9,4406.0,-0.5,0.571,1.061),(0.02,1.0,4793.0,-0.28,0.725,1.325),(0.02,1.1,5302.0,0.01,0.988,1.769),(0.02,1.2,5911.0,0.35,1.411,2.48),(0.02,1.3,6330.0,0.41,1.474,2.567),(0.02,1.4,6475.0,0.5,1.621,2.815),(0.025,0.015,2181.0,-3.2,0.027,0.055),(0.025,0.02,2306.0,-3.12,0.029,0.059),(0.025,0.03,2500.0,-2.95,0.035,0.071),(0.025,0.04,2655.0,-2.76,0.044,0.088),(0.025,0.05,2792.0,-2.6,0.052,0.105),(0.025,0.06,2874.0,-2.48,0.06,0.12),(0.025,0.07,2935.0,-2.38,0.067,0.134),(0.025,0.072,2946.0,-2.36,0.069,0.137),(0.025,0.075,2961.0,-2.34,0.07,0.14),(0.025,0.08,2985.0,-2.3,0.074,0.147),(0.025,0.09,3026.0,-2.22,0.081,0.16),(0.025,0.1,3061.0,-2.16,0.087,0.172),(0.025,0.11,3094.0,-2.1,0.093,0.184),(0.025,0.13,3148.0,-2.0,0.104,0.205),(0.025,0.15,3194.0,-1.9,0.117,0.23),(0.025,0.17,3228.0,-1.83,0.126,0.249),(0.025,0.2,3276.0,-1.73,0.142,0.279),(0.025,0.3,3410.0,-1.48,0.189,0.368),(0.025,0.4,3507.0,-1.31,0.229,0.445),(0.025,0.5,3604.0,-1.18,0.266,0.514),(0.025,0.6,3731.0,-1.04,0.312,0.599),(0.025,0.7,3916.0,-0.88,0.374,0.711),(0.025,0.8,4186.0,-0.69,0.462,0.868),(0.025,0.9,4601.0,-0.45,0.601,1.106),(0.025,1.0,5147.0,-0.15,0.829,1.492),(0.025,1.1,5796.0,0.18,1.168,2.059),(0.025,1.2,6102.0,0.22,1.201,2.101),(0.025,1.3,6271.0,0.35,1.38,2.408),(0.025,1.4,6622.0,0.55,1.702,2.953),(0.03,0.015,2139.0,-3.26,0.025,0.051),(0.03,0.02,2184.0,-3.29,0.024,0.049),(0.03,0.03,2448.0,-3.05,0.031,0.064),(0.03,0.04,2632.0,-2.83,0.04,0.081),(0.03,0.05,2755.0,-2.68,0.048,0.096),(0.03,0.06,2860.0,-2.55,0.055,0.111),(0.03,0.07,2925.0,-2.45,0.062,0.124),(0.03,0.072,2936.0,-2.43,0.064,0.127),(0.03,0.075,2952.0,-2.4,0.066,0.131),(0.03,0.08,2977.0,-2.36,0.069,0.137),(0.03,0.09,3020.0,-2.28,0.075,0.15),(0.03,0.1,3056.0,-2.22,0.081,0.16),(0.03,0.11,3089.0,-2.16,0.087,0.172),(0.03,0.13,3145.0,-2.05,0.098,0.194),(0.03,0.15,3193.0,-1.96,0.109,0.215),(0.03,0.17,3231.0,-1.88,0.119,0.235),(0.03,0.2,3279.0,-1.78,0.134,0.262),(0.03,0.3,3413.0,-1.54,0.176,0.344),(0.03,0.4,3508.0,-1.36,0.216,0.42),(0.03,0.5,3602.0,-1.23,0.251,0.485),(0.03,0.6,3739.0,-1.08,0.298,0.571),(0.03,0.7,3960.0,-0.9,0.365,0.693),(0.03,0.8,4320.0,-0.66,0.477,0.889),(0.03,0.9,4848.0,-0.37,0.653,1.188),(0.03,1.0,5520.0,-0.03,0.932,1.657),(0.03,1.1,5897.0,0.07,1.023,1.799),(0.03,1.2,6052.0,0.19,1.163,2.038),(0.03,1.3,6335.0,0.38,1.423,2.48),(0.03,1.4,6743.0,0.56,1.711,2.961),(0.04,0.015,1996.0,-3.45,0.02,0.042),(0.04,0.02,2005.0,-3.52,0.018,0.038),(0.04,0.03,2366.0,-3.18,0.027,0.055),(0.04,0.04,2581.0,-2.95,0.035,0.071),(0.04,0.05,2699.0,-2.8,0.042,0.084),(0.04,0.06,2830.0,-2.65,0.049,0.099),(0.04,0.07,2904.0,-2.55,0.055,0.11),(0.04,0.072,2916.0,-2.53,0.057,0.113),(0.04,0.075,2933.0,-2.5,0.059,0.117),(0.04,0.08,2961.0,-2.45,0.062,0.124),(0.04,0.09,3007.0,-2.38,0.067,0.134),(0.04,0.1,3046.0,-2.31,0.073,0.145),(0.04,0.11,3081.0,-2.25,0.078,0.155),(0.04,0.13,3138.0,-2.14,0.089,0.175),(0.04,0.15,3187.0,-2.05,0.098,0.194),(0.04,0.17,3229.0,-1.97,0.108,0.212),(0.04,0.2,3280.0,-1.87,0.121,0.237),(0.04,0.3,3410.0,-1.62,0.161,0.314),(0.04,0.4,3509.0,-1.44,0.197,0.383),(0.04,0.5,3606.0,-1.29,0.234,0.453),(0.04,0.6,3771.0,-1.12,0.284,0.544),(0.04,0.7,4084.0,-0.88,0.372,0.703),(0.04,0.8,4645.0,-0.57,0.523,0.96),(0.04,0.9,5301.0,-0.25,0.733,1.311),(0.04,1.0,5570.0,-0.15,0.81,1.437),(0.04,1.1,5822.0,0.02,0.97,1.708),(0.04,1.2,6090.0,0.21,1.188,2.08),(0.04,1.3,6413.0,0.4,1.45,2.522),(0.04,1.4,6757.0,0.56,1.709,2.961),(0.05,0.015,1760.0,-3.74,0.015,0.03),(0.05,0.02,1838.0,-3.72,0.015,0.031),(0.05,0.03,2304.0,-3.28,0.024,0.049),(0.05,0.04,2525.0,-3.05,0.031,0.064),(0.05,0.05,2671.0,-2.88,0.038,0.077),(0.05,0.06,2804.0,-2.73,0.045,0.09),(0.05,0.07,2882.0,-2.63,0.05,0.101),(0.05,0.072,2896.0,-2.61,0.052,0.103),(0.05,0.075,2916.0,-2.57,0.054,0.108),(0.05,0.08,2945.0,-2.53,0.057,0.113),(0.05,0.09,2996.0,-2.45,0.062,0.123),(0.05,0.1,3037.0,-2.38,0.067,0.133),(0.05,0.11,3073.0,-2.32,0.072,0.143),(0.05,0.13,3133.0,-2.21,0.082,0.162),(0.05,0.15,3182.0,-2.13,0.09,0.176),(0.05,0.17,3225.0,-2.04,0.099,0.195),(0.05,0.2,3280.0,-1.94,0.111,0.218),(0.05,0.3,3407.0,-1.69,0.148,0.289),(0.05,0.4,3512.0,-1.5,0.184,0.358),(0.05,0.5,3617.0,-1.34,0.221,0.427),(0.05,0.6,3821.0,-1.13,0.281,0.537),(0.05,0.7,4270.0,-0.83,0.392,0.733),(0.05,0.8,4938.0,-0.49,0.566,1.027),(0.05,0.9,5236.0,-0.36,0.648,1.163),(0.05,1.0,5536.0,-0.17,0.793,1.408),(0.05,1.1,5833.0,0.03,0.981,1.728),(0.05,1.2,6133.0,0.23,1.212,2.12),(0.05,1.3,6435.0,0.4,1.448,2.519),(0.05,1.4,6759.0,0.56,1.709,2.958),(0.08,0.03,2047.0,-3.58,0.017,0.036),(0.08,0.04,2387.0,-3.26,0.025,0.05),(0.08,0.05,2586.0,-3.06,0.031,0.063),(0.08,0.06,2709.0,-2.92,0.036,0.073),(0.08,0.07,2829.0,-2.78,0.043,0.085),(0.08,0.072,2845.0,-2.76,0.043,0.087),(0.08,0.075,2869.0,-2.73,0.045,0.09),(0.08,0.08,2905.0,-2.69,0.047,0.094),(0.08,0.09,2962.0,-2.6,0.052,0.104),(0.08,0.1,3010.0,-2.54,0.056,0.111),(0.08,0.11,3052.0,-2.47,0.061,0.12),(0.08,0.13,3120.0,-2.36,0.069,0.136),(0.08,0.15,3173.0,-2.26,0.077,0.152),(0.08,0.17,3217.0,-2.18,0.084,0.166),(0.08,0.2,3275.0,-2.08,0.095,0.186),(0.08,0.3,3406.0,-1.82,0.128,0.249),(0.08,0.4,3522.0,-1.61,0.162,0.315),(0.08,0.5,3668.0,-1.4,0.206,0.397),(0.08,0.6,4039.0,-1.09,0.293,0.554),(0.08,0.7,4497.0,-0.83,0.39,0.72),(0.08,0.8,4830.0,-0.61,0.495,0.903),(0.08,0.9,5212.0,-0.37,0.641,1.151),(0.08,1.0,5533.0,-0.17,0.793,1.408),(0.08,1.1,5876.0,0.05,1.001,1.761),(0.08,1.2,6164.0,0.24,1.224,2.138),(0.08,1.3,6451.0,0.41,1.463,2.545),(0.08,1.4,6766.0,0.56,1.708,2.958),(0.1,0.03,1912.0,-3.74,0.014,0.03),(0.1,0.04,2311.0,-3.36,0.022,0.045),(0.1,0.05,2525.0,-3.15,0.028,0.057),(0.1,0.06,2670.0,-3.0,0.033,0.067),(0.1,0.07,2794.0,-2.87,0.038,0.077),(0.1,0.072,2813.0,-2.84,0.04,0.08),(0.1,0.075,2839.0,-2.81,0.041,0.082),(0.1,0.08,2879.0,-2.76,0.043,0.087),(0.1,0.09,2942.0,-2.68,0.048,0.095),(0.1,0.1,2993.0,-2.61,0.052,0.103),(0.1,0.11,3038.0,-2.54,0.056,0.111),(0.1,0.13,3112.0,-2.43,0.063,0.125),(0.1,0.15,3167.0,-2.33,0.071,0.14),(0.1,0.17,3214.0,-2.25,0.078,0.153),(0.1,0.2,3272.0,-2.14,0.088,0.174),(0.1,0.3,3409.0,-1.87,0.12,0.235),(0.1,0.4,3529.0,-1.65,0.155,0.3),(0.1,0.5,3705.0,-1.41,0.204,0.392),(0.1,0.6,4100.0,-1.09,0.292,0.551),(0.1,0.7,4402.0,-0.88,0.369,0.685),(0.1,0.8,4826.0,-0.61,0.495,0.903),(0.1,0.9,5209.0,-0.37,0.641,1.151),(0.1,1.0,5541.0,-0.16,0.802,1.424),(0.1,1.1,5886.0,0.05,1.0,1.758),(0.1,1.2,6170.0,0.24,1.224,2.138),(0.1,1.3,6453.0,0.41,1.463,2.545),(0.1,1.4,6766.0,0.56,1.708,2.958),(0.12,0.03,1779.0,-3.88,0.012,0.026),(0.12,0.04,2225.0,-3.46,0.02,0.04),(0.12,0.05,2471.0,-3.23,0.025,0.052),(0.12,0.06,2635.0,-3.06,0.031,0.062),(0.12,0.07,2757.0,-2.94,0.035,0.071),(0.12,0.072,2780.0,-2.91,0.037,0.074),(0.12,0.075,2810.0,-2.88,0.038,0.076),(0.12,0.08,2853.0,-2.83,0.04,0.08),(0.12,0.09,2924.0,-2.74,0.044,0.089),(0.12,0.1,2978.0,-2.67,0.048,0.096),(0.12,0.11,3026.0,-2.6,0.052,0.104),(0.12,0.13,3105.0,-2.48,0.06,0.118),(0.12,0.15,3162.0,-2.38,0.067,0.133),(0.12,0.17,3210.0,-2.3,0.074,0.145),(0.12,0.2,3270.0,-2.19,0.083,0.164),(0.12,0.3,3411.0,-1.91,0.115,0.225),(0.12,0.4,3536.0,-1.68,0.15,0.29),(0.12,0.5,3727.0,-1.42,0.201,0.387),(0.12,0.6,4030.0,-1.15,0.273,0.517),(0.12,0.7,4400.0,-0.88,0.369,0.686),(0.12,0.8,4825.0,-0.61,0.495,0.903),(0.12,0.9,5208.0,-0.37,0.641,1.151),(0.12,1.0,5547.0,-0.16,0.802,1.422),(0.12,1.1,5889.0,0.05,1.0,1.758),(0.12,1.2,6172.0,0.24,1.223,2.138),(0.12,1.3,6455.0,0.41,1.463,2.545),(0.12,1.4,6767.0,0.56,1.708,2.958),(0.2,0.04,1940.0,-3.78,0.014,0.029),(0.2,0.05,2268.0,-3.48,0.019,0.039),(0.2,0.06,2488.0,-3.28,0.024,0.049),(0.2,0.07,2639.0,-3.14,0.028,0.057),(0.2,0.072,2664.0,-3.11,0.029,0.059),(0.2,0.075,2698.0,-3.08,0.03,0.061),(0.2,0.08,2756.0,-3.02,0.032,0.065),(0.2,0.09,2853.0,-2.91,0.037,0.073),(0.2,0.1,2926.0,-2.83,0.04,0.08),(0.2,0.11,2982.0,-2.75,0.044,0.087),(0.2,0.13,3076.0,-2.62,0.051,0.101),(0.2,0.15,3144.0,-2.51,0.058,0.114),(0.2,0.17,3198.0,-2.41,0.065,0.128),(0.2,0.2,3264.0,-2.28,0.075,0.148),(0.2,0.3,3414.0,-1.98,0.106,0.207),(0.2,0.4,3537.0,-1.73,0.141,0.274),(0.2,0.5,3701.0,-1.46,0.192,0.37),(0.2,0.6,3981.0,-1.17,0.267,0.507),(0.2,0.7,4390.0,-0.88,0.369,0.686),(0.2,0.8,4824.0,-0.61,0.496,0.903),(0.2,0.9,5207.0,-0.37,0.641,1.151),(0.2,1.0,5567.0,-0.15,0.81,1.437),(0.2,1.1,5895.0,0.06,1.011,1.778),(0.2,1.2,6177.0,0.24,1.223,2.136),(0.2,1.3,6456.0,0.42,1.48,2.574),(0.2,1.4,6766.0,0.57,1.728,2.992),(0.3,0.04,1667.0,-4.09,0.01,0.02),(0.3,0.05,2063.0,-3.72,0.015,0.03),(0.3,0.06,2331.0,-3.48,0.019,0.039),(0.3,0.07,2519.0,-3.31,0.023,0.047),(0.3,0.072,2552.0,-3.28,0.024,0.049),(0.3,0.075,2594.0,-3.24,0.025,0.051),(0.3,0.08,2660.0,-3.17,0.027,0.055),(0.3,0.09,2782.0,-3.04,0.032,0.063),(0.3,0.1,2874.0,-2.94,0.035,0.071),(0.3,0.11,2946.0,-2.85,0.039,0.078),(0.3,0.13,3055.0,-2.69,0.047,0.093),(0.3,0.15,3134.0,-2.56,0.055,0.108),(0.3,0.17,3192.0,-2.45,0.062,0.122),(0.3,0.2,3261.0,-2.32,0.072,0.141),(0.3,0.3,3415.0,-1.99,0.105,0.205),(0.3,0.4,3528.0,-1.73,0.141,0.274),(0.3,0.5,3689.0,-1.46,0.192,0.37),(0.3,0.6,3971.0,-1.17,0.267,0.507),(0.3,0.7,4388.0,-0.88,0.369,0.686),(0.3,0.8,4822.0,-0.61,0.496,0.903),(0.3,0.9,5209.0,-0.37,0.641,1.151),(0.3,1.0,5572.0,-0.14,0.819,1.453),(0.3,1.1,5898.0,0.06,1.011,1.778),(0.3,1.2,6179.0,0.25,1.237,2.16),(0.3,1.3,6456.0,0.42,1.48,2.574),(0.3,1.4,6761.0,0.58,1.749,3.027),(0.4,0.05,1836.0,-3.96,0.011,0.023),(0.4,0.06,2207.0,-3.62,0.016,0.034),(0.4,0.07,2419.0,-3.43,0.02,0.041),(0.4,0.072,2457.0,-3.4,0.021,0.043),(0.4,0.075,2508.0,-3.35,0.022,0.045),(0.4,0.08,2594.0,-3.27,0.024,0.049),(0.4,0.09,2726.0,-3.13,0.028,0.057),(0.4,0.1,2844.0,-3.0,0.033,0.066),(0.4,0.11,2929.0,-2.89,0.037,0.075),(0.4,0.13,3048.0,-2.72,0.045,0.09),(0.4,0.15,3131.0,-2.58,0.053,0.106),(0.4,0.17,3191.0,-2.46,0.061,0.121),(0.4,0.2,3260.0,-2.32,0.072,0.141),(0.4,0.3,3415.0,-1.99,0.105,0.205),(0.4,0.4,3526.0,-1.73,0.141,0.274),(0.4,0.5,3685.0,-1.46,0.192,0.37),(0.4,0.6,3969.0,-1.17,0.267,0.507),(0.4,0.7,4387.0,-0.87,0.373,0.694),(0.4,0.8,4821.0,-0.61,0.496,0.903),(0.4,0.9,5210.0,-0.36,0.649,1.164),(0.4,1.0,5574.0,-0.14,0.819,1.453),(0.4,1.1,5901.0,0.06,1.011,1.778),(0.4,1.2,6181.0,0.25,1.237,2.16),(0.4,1.3,6453.0,0.43,1.497,2.604),(0.4,1.4,6750.0,0.58,1.75,3.03),(0.5,0.05,1698.0,-4.12,0.009,0.02),(0.5,0.06,2082.0,-3.76,0.014,0.029),(0.5,0.07,2335.0,-3.53,0.018,0.037),(0.5,0.072,2378.0,-3.49,0.019,0.039),(0.5,0.075,2435.0,-3.44,0.02,0.041),(0.5,0.08,2539.0,-3.34,0.022,0.045),(0.5,0.09,2696.0,-3.18,0.027,0.054),(0.5,0.1,2828.0,-3.03,0.032,0.064),(0.5,0.11,2921.0,-2.91,0.037,0.073),(0.5,0.13,3046.0,-2.72,0.045,0.09),(0.5,0.15,3130.0,-2.58,0.053,0.106),(0.5,0.17,3191.0,-2.46,0.061,0.121),(0.5,0.2,3260.0,-2.32,0.072,0.141),(0.5,0.3,3415.0,-1.99,0.105,0.205),(0.5,0.4,3524.0,-1.73,0.141,0.274),(0.5,0.5,3682.0,-1.46,0.192,0.37),(0.5,0.6,3968.0,-1.17,0.267,0.507),(0.5,0.7,4386.0,-0.87,0.373,0.694),(0.5,0.8,4821.0,-0.6,0.501,0.914),(0.5,0.9,5211.0,-0.36,0.649,1.164),(0.5,1.0,5576.0,-0.14,0.819,1.451),(0.5,1.1,5904.0,0.07,1.023,1.797),(0.5,1.2,6182.0,0.26,1.251,2.185),(0.5,1.3,6451.0,0.43,1.497,2.604),(0.5,1.4,6742.0,0.59,1.771,3.065),(0.625,0.05,1555.0,-4.29,0.008,0.016),(0.625,0.06,1908.0,-3.94,0.011,0.024),(0.625,0.07,2248.0,-3.63,0.016,0.033),(0.625,0.072,2301.0,-3.58,0.017,0.035),(0.625,0.075,2370.0,-3.52,0.018,0.037),(0.625,0.08,2485.0,-3.41,0.021,0.042),(0.625,0.09,2671.0,-3.21,0.026,0.052),(0.625,0.1,2817.0,-3.05,0.031,0.063),(0.625,0.11,2917.0,-2.92,0.036,0.072),(0.625,0.13,3045.0,-2.73,0.045,0.089),(0.625,0.15,3130.0,-2.58,0.053,0.106),(0.625,0.17,3191.0,-2.46,0.061,0.121),(0.625,0.2,3260.0,-2.32,0.072,0.141),(0.625,0.3,3415.0,-1.99,0.105,0.205),(0.625,0.4,3522.0,-1.72,0.143,0.277),(0.625,0.5,3681.0,-1.46,0.192,0.37),(0.625,0.6,3969.0,-1.17,0.267,0.507),(0.625,0.7,4385.0,-0.87,0.373,0.694),(0.625,0.8,4821.0,-0.6,0.501,0.914),(0.625,0.9,5213.0,-0.36,0.649,1.164),(0.625,1.0,5580.0,-0.14,0.819,1.451),(0.625,1.1,5907.0,0.07,1.022,1.797),(0.625,1.2,6183.0,0.26,1.251,2.185),(0.625,1.3,6446.0,0.44,1.515,2.634),(0.625,1.4,6727.0,0.59,1.772,3.069),(0.8,0.06,1716.0,-4.15,0.009,0.019),(0.8,0.07,2136.0,-3.75,0.014,0.029),(0.8,0.072,2212.0,-3.69,0.015,0.031),(0.8,0.075,2294.0,-3.61,0.017,0.034),(0.8,0.08,2436.0,-3.47,0.019,0.039),(0.8,0.09,2656.0,-3.24,0.025,0.051),(0.8,0.1,2812.0,-3.06,0.031,0.062),(0.8,0.11,2915.0,-2.92,0.036,0.072),(0.8,0.13,3045.0,-2.73,0.045,0.089),(0.8,0.15,3130.0,-2.58,0.053,0.106),(0.8,0.17,3191.0,-2.46,0.061,0.121),(0.8,0.2,3260.0,-2.32,0.072,0.141),(0.8,0.3,3415.0,-1.99,0.105,0.205),(0.8,0.4,3521.0,-1.72,0.143,0.277),(0.8,0.5,3680.0,-1.46,0.192,0.37),(0.8,0.6,3968.0,-1.17,0.267,0.507),(0.8,0.7,4386.0,-0.87,0.373,0.694),(0.8,0.8,4823.0,-0.6,0.501,0.914),(0.8,0.9,5216.0,-0.36,0.648,1.164),(0.8,1.0,5586.0,-0.13,0.828,1.468),(0.8,1.1,5910.0,0.08,1.034,1.817),(0.8,1.2,6184.0,0.27,1.265,2.211),(0.8,1.3,6442.0,0.45,1.533,2.664),(0.8,1.4,6705.0,0.61,1.816,3.144),(1.0,0.06,1584.0,-4.3,0.008,0.016),(1.0,0.07,2047.0,-3.85,0.013,0.026),(1.0,0.072,2109.0,-3.79,0.013,0.028),(1.0,0.075,2243.0,-3.67,0.015,0.032),(1.0,0.08,2400.0,-3.51,0.018,0.038),(1.0,0.09,2648.0,-3.25,0.025,0.05),(1.0,0.1,2810.0,-3.06,0.031,0.062),(1.0,0.11,2915.0,-2.92,0.036,0.072),(1.0,0.13,3045.0,-2.73,0.045,0.089),(1.0,0.15,3130.0,-2.58,0.053,0.106),(1.0,0.17,3191.0,-2.46,0.061,0.121),(1.0,0.2,3261.0,-2.32,0.072,0.141),(1.0,0.3,3415.0,-1.99,0.105,0.205),(1.0,0.4,3520.0,-1.72,0.143,0.277),(1.0,0.5,3680.0,-1.46,0.192,0.37),(1.0,0.6,3967.0,-1.16,0.27,0.513),(1.0,0.7,4387.0,-0.87,0.373,0.694),(1.0,0.8,4826.0,-0.6,0.501,0.914),(1.0,0.9,5220.0,-0.35,0.656,1.178),(1.0,1.0,5592.0,-0.13,0.827,1.468),(1.0,1.1,5916.0,0.09,1.046,1.838),(1.0,1.2,6187.0,0.28,1.28,2.236),(1.0,1.3,6438.0,0.46,1.551,2.699),(1.0,1.4,6684.0,0.62,1.839,3.189),(2.0,0.07,1720.0,-4.19,0.009,0.018),(2.0,0.072,1811.0,-4.09,0.01,0.02),(2.0,0.075,2083.0,-3.84,0.013,0.026),(2.0,0.08,2348.0,-3.57,0.017,0.035),(2.0,0.09,2643.0,-3.25,0.025,0.05),(2.0,0.1,2810.0,-3.06,0.031,0.062),(2.0,0.11,2915.0,-2.92,0.036,0.072),(2.0,0.13,3045.0,-2.73,0.045,0.089),(2.0,0.15,3130.0,-2.58,0.053,0.106),(2.0,0.17,3191.0,-2.46,0.061,0.121),(2.0,0.2,3261.0,-2.32,0.072,0.141),(2.0,0.3,3415.0,-1.98,0.106,0.207),(2.0,0.4,3519.0,-1.71,0.145,0.28),(2.0,0.5,3679.0,-1.45,0.195,0.374),(2.0,0.6,3969.0,-1.16,0.27,0.513),(2.0,0.7,4396.0,-0.86,0.378,0.702),(2.0,0.8,4842.0,-0.59,0.507,0.923),(2.0,0.9,5244.0,-0.33,0.67,1.202),(2.0,1.0,5627.0,-0.1,0.855,1.513),(2.0,1.1,5945.0,0.13,1.093,1.92),(2.0,1.2,6202.0,0.33,1.355,2.366),(2.0,1.3,6403.0,0.52,1.665,2.899),(2.0,1.4,6464.0,0.68,1.995,3.468),(3.0,0.07,1650.0,-4.27,0.008,0.017),(3.0,0.072,1793.0,-4.11,0.009,0.02),(3.0,0.075,2052.0,-3.87,0.012,0.025),(3.0,0.08,2343.0,-3.58,0.017,0.035),(3.0,0.09,2644.0,-3.25,0.025,0.05),(3.0,0.1,2810.0,-3.06,0.031,0.062),(3.0,0.11,2915.0,-2.92,0.036,0.072),(3.0,0.13,3046.0,-2.73,0.045,0.089),(3.0,0.15,3131.0,-2.58,0.053,0.106),(3.0,0.17,3191.0,-2.46,0.061,0.121),(3.0,0.2,3261.0,-2.32,0.072,0.141),(3.0,0.3,3416.0,-1.97,0.107,0.21),(3.0,0.4,3520.0,-1.71,0.145,0.28),(3.0,0.5,3679.0,-1.45,0.195,0.374),(3.0,0.6,3974.0,-1.15,0.274,0.519),(3.0,0.7,4407.0,-0.85,0.382,0.709),(3.0,0.8,4859.0,-0.57,0.518,0.942),(3.0,0.9,5270.0,-0.31,0.685,1.228),(3.0,1.0,5661.0,-0.06,0.893,1.58),(3.0,1.1,5974.0,0.17,1.142,2.005),(3.0,1.2,6191.0,0.39,1.452,2.538),(3.0,1.3,6177.0,0.56,1.768,3.087),(4.0,0.07,1631.0,-4.29,0.008,0.016),(4.0,0.072,1790.0,-4.12,0.009,0.02),(4.0,0.075,2041.0,-3.88,0.012,0.025),(4.0,0.08,2343.0,-3.58,0.017,0.035),(4.0,0.09,2644.0,-3.25,0.025,0.05),(4.0,0.1,2811.0,-3.06,0.031,0.062),(4.0,0.11,2916.0,-2.92,0.036,0.072),(4.0,0.13,3046.0,-2.73,0.045,0.089),(4.0,0.15,3131.0,-2.58,0.053,0.106),(4.0,0.17,3192.0,-2.46,0.061,0.121),(4.0,0.2,3262.0,-2.32,0.072,0.141),(4.0,0.3,3416.0,-1.97,0.107,0.21),(4.0,0.4,3520.0,-1.71,0.145,0.28),(4.0,0.5,3680.0,-1.45,0.195,0.374),(4.0,0.6,3979.0,-1.15,0.273,0.519),(4.0,0.7,4418.0,-0.85,0.382,0.709),(4.0,0.8,4878.0,-0.56,0.524,0.952),(4.0,0.9,5297.0,-0.29,0.7,1.252),(4.0,1.0,5697.0,-0.03,0.923,1.631),(4.0,1.1,5996.0,0.23,1.222,2.145),(4.0,1.2,6053.0,0.43,1.534,2.686),(5.0,0.07,1627.0,-4.3,0.008,0.016),(5.0,0.072,1790.0,-4.12,0.009,0.02),(5.0,0.075,2038.0,-3.89,0.012,0.025),(5.0,0.08,2343.0,-3.58,0.017,0.035),(5.0,0.09,2644.0,-3.25,0.025,0.05),(5.0,0.1,2811.0,-3.06,0.031,0.062),(5.0,0.11,2916.0,-2.92,0.036,0.072),(5.0,0.13,3046.0,-2.73,0.045,0.089),(5.0,0.15,3131.0,-2.58,0.053,0.106),(5.0,0.17,3192.0,-2.46,0.061,0.121),(5.0,0.2,3262.0,-2.32,0.072,0.141),(5.0,0.3,3416.0,-1.96,0.109,0.212),(5.0,0.4,3521.0,-1.71,0.145,0.28),(5.0,0.5,3682.0,-1.44,0.197,0.379),(5.0,0.6,3984.0,-1.15,0.273,0.519),(5.0,0.7,4430.0,-0.84,0.386,0.716),(5.0,0.8,4896.0,-0.55,0.529,0.961),(5.0,0.9,5325.0,-0.27,0.715,1.278),(5.0,1.0,5732.0,0.01,0.964,1.703),(5.0,1.1,5971.0,0.27,1.282,2.249),(8.0,0.07,1626.0,-4.3,0.008,0.016),(8.0,0.072,1789.0,-4.12,0.009,0.02),(8.0,0.075,2036.0,-3.89,0.012,0.025),(8.0,0.08,2344.0,-3.58,0.017,0.035),(8.0,0.09,2645.0,-3.25,0.025,0.05),(8.0,0.1,2812.0,-3.06,0.031,0.062),(8.0,0.11,2917.0,-2.92,0.036,0.072),(8.0,0.13,3047.0,-2.73,0.045,0.089),(8.0,0.15,3132.0,-2.58,0.053,0.106),(8.0,0.17,3193.0,-2.46,0.061,0.121),(8.0,0.2,3264.0,-2.31,0.073,0.143),(8.0,0.3,3416.0,-1.95,0.11,0.214),(8.0,0.4,3522.0,-1.7,0.146,0.284),(8.0,0.5,3686.0,-1.44,0.197,0.379),(8.0,0.6,4001.0,-1.13,0.28,0.53),(8.0,0.7,4467.0,-0.81,0.399,0.74),(8.0,0.8,4958.0,-0.5,0.559,1.013),(8.0,0.9,5420.0,-0.19,0.78,1.39),(8.0,1.0,5772.0,0.15,1.13,1.992),(10.0,0.07,1626.0,-4.3,0.008,0.016),(10.0,0.072,1790.0,-4.12,0.009,0.02),(10.0,0.075,2037.0,-3.89,0.012,0.025),(10.0,0.08,2345.0,-3.58,0.017,0.035),(10.0,0.09,2646.0,-3.25,0.025,0.05),(10.0,0.1,2812.0,-3.06,0.031,0.062),(10.0,0.11,2917.0,-2.92,0.036,0.072),(10.0,0.13,3048.0,-2.73,0.045,0.089),(10.0,0.15,3133.0,-2.58,0.053,0.106),(10.0,0.17,3194.0,-2.46,0.061,0.121),(10.0,0.2,3265.0,-2.31,0.073,0.143),(10.0,0.3,3416.0,-1.95,0.11,0.214),(10.0,0.4,3524.0,-1.7,0.146,0.284),(10.0,0.5,3689.0,-1.43,0.199,0.383),(10.0,0.6,4013.0,-1.12,0.283,0.536),(10.0,0.7,4493.0,-0.79,0.408,0.754),(10.0,0.8,5002.0,-0.47,0.577,1.045),(10.0,0.9,5495.0,-0.12,0.842,1.496)]
    
    def __init__(self, args):    

        dbname = None
        cfname = "dynamite_config.txt"
        timestamp = datetime.now(tz=None).strftime("%m_%d_%Y_%H_%M_%S")
        exoPlanetCSV = self.exoPlanetCSV + timestamp + ".csv"
        exoFopCSV = self.exoFopCSV + timestamp + ".csv"
        hypatiaCSV = self.hypatiaCSV + timestamp + ".csv"
        input_exoPlanet_csv = False
        input_exoFop_csv = False
        input_hypatia_csv = False
        adjustmentsCSV = None
        compparsCSV = self.exoPlanetCSV + timestamp + "_2.csv"
        toiCSV = self.exoPlanetCSV + timestamp + "_3.csv"

        for a in args:
            if ".db" in a:
                dbname = a
            elif ".txt" in a and os.path.exists(a):
                cfname = a
            elif exoPlanetCSV.split("_")[0] in a and os.path.exists(a):
                input_exoPlanet_csv = True
                exoPlanetCSV = a
                compparsCSV = a[:-4] + "_2.csv"
                self.csv_comppars = self.read_addl_csv(compparsCSV)
                #toiCSV = a[:-4] + "_3.csv"
                #self.csv_toi = self.read_addl_csv(toiCSV)
            elif exoFopCSV.split("_")[0] in a and os.path.exists(a):
                input_exoFop_csv = True
                exoFopCSV = a
            elif hypatiaCSV.split("_")[0] in a and os.path.exists(a):
                input_hypatia_csv = True
                hypatiaCSV = a
            # initialize adjustments.csv
            elif "adjustments.csv" in a and os.path.exists(a):
                adjustmentsCSV = "adjustments.csv"
                self.read_adjustments(adjustmentsCSV)

        self.config_parameters = {}
        try:
            db = None
            config_data = np.loadtxt(cfname, dtype=str, delimiter=':')
            for i in range(len(config_data)):
                self.config_parameters[config_data[i, 0]] = config_data[i, 1] if config_data[i, 1].find("[") == -1 else ast.literal_eval(config_data[i, 1])
            db = self.config_parameters["targets_db"]
            if self.config_parameters["exoplanetarchive_csv"] != "":
                exoPlanetCSV = self.config_parameters["exoplanetarchive_csv"]
                compparsCSV = self.config_parameters["exoplanetarchive_csv"][:-4] + "_2.csv"
                self.csv_comppars = self.read_addl_csv(compparsCSV)
                #toiCSV = self.config_parameters["exoplanetarchive_csv"][:-4] + "_3.csv"
                #self.csv_toi = self.read_addl_csv(toiCSV)
                input_exoPlanet_csv = True
            if self.config_parameters["exofop_csv"] != "":
                exoFopCSV = self.config_parameters["exofop_csv"]
                input_exoFop_csv = True
        except:
            pass
        dbname = dbname if dbname != None else db if db != None else 'dynamite_targets_archive.db'
        
        if not input_exoPlanet_csv:
            exoPlanetCSV = self.create_csv(self.exoPlanetArchiveURL, exoPlanetCSV)
            compparsCSV = self.create_csv(self.exoPlanetArchiveURL2, compparsCSV)
            toiCSV = self.create_csv(self.exoPlanetArchiveURL3, toiCSV)
            self.csv_comppars = self.read_addl_csv(compparsCSV)
            #self.csv_toi = self.read_addl_csv(toiCSV)
        if not input_exoFop_csv and not input_exoPlanet_csv:
            exoFopCSV = self.create_csv(self.exofopArchiveURL, exoFopCSV) 
        if not os.path.exists(exoPlanetCSV) and not os.path.exists(exoFopCSV):
            print("CSV files not found program terminated!!!!")
            exit(1)
        try:            
            if not os.path.exists(dbname):
                dbconn, dbcursor = self.create_database(dbname)
            else:
                ftime = (0, 0)
                g = glob.glob(dbname + "_backup_*")
                if len(g) > 5:
                    for file in g:
                        if ftime[0] == 0 or os.path.getmtime(file) < ftime[0]:
                            ftime = (os.path.getmtime(file), file)
                    if ftime[1] != 0:
                        os.remove(ftime[1])
                shutil.copyfile(dbname, dbname + "_backup_" + timestamp)            
                dbconn = sqlite3.connect(dbname)
                dbcursor = dbconn.cursor()
                
            print("Connected Database: " + dbname)
            dbcursor.execute('PRAGMA foreign_keys = ON')
            dbcursor.execute("select dbattr, datasource, csvcolumn from dbcsvmap")
            for (dbattr, datasrc, csvcolumn) in dbcursor.fetchall():
                self.dbcsvmap[(dbattr,datasrc)] = csvcolumn
            dbcursor.execute("select t.name from pragma_table_info('target') as t")
            self.dbattr_target = [row[0] for row in dbcursor.fetchall()]
            dbcursor.execute("select t.name from pragma_table_info('planet') as t")
            self.dbattr_planet = [row[0] for row in dbcursor.fetchall()]
            dbcursor.execute("select count(*) from target")
            self.empty_db = dbcursor.fetchone()[0] == 0
            
            if os.path.exists(exoPlanetCSV):
                self.load_database(dbconn, dbcursor, exoPlanetCSV, exoPlanetCSV, compparsCSV, toiCSV)
            if os.path.exists(exoFopCSV):
                self.load_database(dbconn, dbcursor, exoFopCSV)
            # process adjustments.csv
            '''if adjustmentsCSV:
                self.adjust_database(dbconn, dbcursor)'''
            
        except Exception as e:
            print(e)
            traceback.print_exc()
        finally:
            if dbconn != None:
                dbconn.close()    

    def create_csv(self, url, csvfile):
        print("Creating " + csvfile) 
        response = requests.get(url)
        if response.status_code != 200:
            print("FATAL ERROR: Cannot access " + url)
            exit(1)
        open(csvfile, "wb").write(response.content)
        return csvfile
    
    def create_database(self, dbname):
        print("New Database " + dbname + " being created!!")
        try:
            dbconn = sqlite3.connect(dbname)
            dbcursor = dbconn.cursor()
            dbcursor.execute("CREATE TABLE dbcsvmap(dbattr text,datasource text,csvcolumn text,primary key(dbattr,datasource));")
            dbcursor.execute("CREATE TABLE isochrones(age float,smass float,stemp float,slum float,inner_hz float,outer_hz float,primary key(smass,age));")
            dbcursor.execute("CREATE TABLE planet(tname text not null,pname text not null,alt_name text,period real not null,period_unc_upper real,period_unc_lower real,pradius real,pradius_unc_upper real,pradius_unc_lower real,pmass real,pmass_unc_upper real, pmass_unc_lower real,pmass_type text,pinc real,pinc_unc_upper real, pinc_unc_lower real,pecc real,pecc_unc_upper real,pecc_unc_lower real,transit real,t0 real,t0_unc_upper real,t0_unc_lower real,primary key(tname, pname),foreign key(tname) references target(tname));")
            dbcursor.execute("CREATE TABLE target(tname text not null,tic_id text unique,alt_name text,sradius real not null,sradius_unc_upper real,sradius_unc_lower real,smass real not null,smass_unc_upper real,smass_unc_lower real,stemp real not null,stemp_unc_upper real,stemp_unc_lower real,distance real,primary key(tname));")
            dbcursor.execute("CREATE TABLE obslimit(tname text not null,limit_type text not null,period_lower real not null,period_upper real not null,limit_value real not null,pname text,notes text not null,primary key (tname, limit_type, period_lower, period_upper));")
            for l in self.dbcsv:
                dbcursor.execute(self.insert_dbcsv_template.substitute(dbattr=l[0],datasource=l[1],csvcolumn="'"+l[2]+"'" if l[2] != None else 'null'))
            for l in self.isochrones:
                dbcursor.execute(self.insert_isochrones_template.substitute(age=l[0],smass=l[1],stemp=l[2],slum=l[3],inner_hz=l[4],outer_hz=l[5]))
            dbconn.commit()
            print("New Database " + dbname + " has been created!!")
        except Exception as e:
            print(e)
            traceback.print_exc()
            print("Cannot create database " + dbname + " program terminated!!")
            dbconn.close()    
            os.remove(dbname)
            exit(1)
        return(dbconn, dbcursor)
    
    def load_database(self, dbconn, dbcursor, csvfile, exoPlanetCSV=None, compparsCSV=None, toiCSV=None):
        try:
            print("Processing csvfile: ", csvfile)
            datasource = csvfile.split("_")[0]
            
            self.read_csv(datasource, csvfile)
            print("Read - targets: ", len(self.csvtargets), "planets: ", len(self.csvplanets))
            if csvfile == exoPlanetCSV:
                self.adjust_csv(compparsCSV)
                #self.adjust_csv(compparsCSV, toiCSV)
            self.adjust_csv()
            self.filter_data(dbcursor)
            self.update_database(dbconn, dbcursor, datasource)                 
           
        except Exception as e:
            print(e)
            traceback.print_exc()

    def update_database(self, dbconn, dbcursor, datasource):
        try:
            if self.empty_db:
                for target in self.csvtargets.keys():
                    values_list = [v  for v in self.csvtargets[target]]
                    values = [ v if v != None else 'null' for v in values_list ]
                    (new_tname, new_tic_id, new_alt_name, new_sr, new_sru, new_srl, new_sm, new_smu, new_sml, new_st, new_stu, new_stl, new_dist) = tuple(values)
                    insert_target_stmt = self.insert_target_template.substitute(tname=new_tname, tic_id=new_tic_id, alt_name=new_alt_name, sr=new_sr, sru=new_sru, srl=new_srl, sm=new_sm, smu=new_smu, sml=new_sml, st=new_st, stu=new_stu, stl=new_stl,dist=new_dist)
                    dbcursor.execute(insert_target_stmt)
                for (tname, pname) in self.csvplanets.keys():
                    if (tname, pname) not in self.excludeList:
                        values_list = [v  for v in self.csvplanets[tname, pname]]
                        values = [ v if v != None else 'null' for v in values_list ]
                        (new_tname, new_pname, new_alt_name, new_p, new_pu, new_pl, new_pr, new_pru, new_prl, new_pm, new_pmu, new_pml, new_pmt, new_pi, new_piu, new_pil, new_pe, new_peu, new_pel, new_tr, new_t0, new_t0u, new_t0l) = tuple(values)
                        insert_planet_stmt = self.insert_planet_template.substitute(tname=new_tname, pname=new_pname, alt_name=new_alt_name, p=new_p, pu=new_pu, pl=new_pl, pr=new_pr, pru=new_pru, prl=new_prl, pm=new_pm, pmu=new_pmu, pml=new_pml, pmt=new_pmt, pi=new_pi, piu=new_piu, pil=new_pil, pe=new_pe, peu=new_peu, pel=new_pel, tr=new_tr, t0=new_t0, t0u=new_t0u, t0l=new_t0l)
                        dbcursor.execute(insert_planet_stmt)
            else:
                for target in self.csvtargets.keys():
                    csv_target_tuple = self.csvtargets[target]
                    csv_target_list = list(csv_target_tuple)
                    csv_target_list = [ v if v != None else 'null' for v in csv_target_list ]
                    csv_target_tuple = tuple(csv_target_list)
                    found_target = self.target_in_db(dbcursor, target)
                    if found_target:
                        if datasource != 'exofop':
                            for dbattr in self.dbattr_target[1:]:
                                if csv_target_list[self.dbattr_target.index(dbattr)] != None:
                                    update_target_stmt = self.update_target_template.substitute(tname=target, attr=dbattr, value=csv_target_list[self.dbattr_target.index(dbattr)])
                                    dbcursor.execute(update_target_stmt)
                        planets = [ p for (t,p) in self.csvplanets.keys() if t == target ]
                        for p in planets:
                            csv_planet_tuple = self.csvplanets[target, p]
                            csv_planet_list = list(csv_planet_tuple)
                            csv_planet_list = [ v if v != None else 'null' for v in csv_planet_list ]
                            csv_planet_tuple = tuple(csv_planet_list)
                            (csv_tname, csv_pname, csv_alt_name, csv_p, csv_pu, csv_pl, csv_pr, csv_pru, csv_prl, csv_pm, csv_pmu, csv_pml, csv_pmt, csv_pi, csv_piu, csv_pil, csv_pe, csv_peu, csv_pel, csv_tr, csv_t0, csv_t0u, cvs_t0l) = csv_planet_tuple
                            found_planet = self.planet_in_db(dbcursor, target, p, csv_p, datasource)
                            if found_planet:
                                if datasource != 'exofop':
                                    for dbattr in self.dbattr_planet[1:]:
                                        dbattr_value = csv_planet_list[self.dbattr_planet.index(dbattr)]
                                        if dbattr_value != None:
                                            if dbattr=='pname':
                                                dbattr_value = "'" + dbattr_value + "'"
                                            update_planet_stmt = self.update_planet_template.substitute(tname=target, pname=found_planet, attr=dbattr, value= dbattr_value)
                                            dbcursor.execute(update_planet_stmt)
                            else:
                                if datasource == 'exofop':
                                    csv_tr = 1
                                if (csv_tname, csv_pname) not in self.excludeList: 
                                    insert_planet_stmt = self.insert_planet_template.substitute(tname=csv_tname, pname=csv_pname, alt_name=csv_alt_name, p=csv_p, pu=csv_pu, pl=csv_pl, pr=csv_pr, pru=csv_pru, prl=csv_prl, pm=csv_pm, pmu=csv_pmu, pml=csv_pml, pmt=csv_pmt, pi=csv_pi, piu=csv_piu, pil=csv_pil, pe=csv_pe, peu=csv_peu, pel=csv_pel, tr=csv_tr, t0=csv_t0, t0u=csv_t0u, t0l=csv_t0l)
                                    dbcursor.execute(insert_planet_stmt)
                    else:
                        (csv_tname, csv_tic_id, csv_alt_name, csv_sr, csv_sru, csv_srl, csv_sm, csv_smu, csv_sml, csv_st, csv_stu, csv_stl, csv_dist) = csv_target_tuple
                        if self.tic_id_in_db(dbcursor, csv_tic_id):
                            tname, new_alt_name = self.alt_name_in_db(dbcursor, csv_tic_id)
                            if new_alt_name == csv_tname or new_alt_name == "null":
                                new_alt_name = csv_tname
                            else:
                                new_alt_name = new_alt_name + ", " + csv_tname
                            update_target_stmt = self.update_target_template.substitute(tname=tname, attr='alt_name', value="'" + new_alt_name + "'")
                            dbcursor.execute(update_target_stmt)
                            select_pname_stmt = self.select_pname_template.substitute(tname=tname)
                            dbcursor.execute(select_pname_stmt)
                            pnames = [p[0] for p in dbcursor.fetchall()]
                            planets = [ p for (t,p) in self.csvplanets.keys() if t == target ]
                            for p in range(len(planets)):
                                csv_planet_tuple = self.csvplanets[target, planets[p]]
                                csv_planet_list = list(csv_planet_tuple)
                                csv_planet_list = [ v if v != None else 'null' for v in csv_planet_list ]
                                csv_planet_tuple = tuple(csv_planet_list)
                                (csv_tname, csv_pname, csv_alt_name, csv_p, csv_pu, csv_pl, csv_pr, csv_pru, csv_prl, csv_pm, csv_pmu, csv_pml, csv_pmt, csv_pi, csv_piu, csv_pil, csv_pe, csv_peu, csv_pel, csv_tr, csv_t0, csv_t0u, csv_t0l) = csv_planet_tuple
                                if datasource == 'exofop':
                                    csv_tr = 1
                                if (csv_tname, csv_pname) not in self.excludeList:
                                    if p < len(pnames):
                                        update_planet_stmt = self.update_planet_template.substitute(tname=tname, pname=pnames[p], attr='alt_name', value="'" + csv_tname + "." + csv_pname + "'")
                                        dbcursor.execute(update_planet_stmt)
                                    else:
                                        insert_planet_stmt = self.insert_planet_template.substitute(tname=tname, pname=csv_pname, alt_name=csv_tname + "." + csv_pname, p=csv_p, pu=csv_pu, pl=csv_pl, pr=csv_pr, pru=csv_pru, prl=csv_prl, pm=csv_pm, pmu=csv_pmu, pml=csv_pml, pmt=csv_pmt, pi=csv_pi, piu=csv_piu, pil=csv_pil, pe=csv_pe, peu=csv_peu, pel=csv_pel, tr=csv_tr, t0=csv_t0, t0u=csv_t0u, t0l=csv_t0l)
                                        dbcursor.execute(insert_planet_stmt)
                        else:
                            insert_target_stmt = self.insert_target_template.substitute(tname=csv_tname, tic_id=csv_tic_id, alt_name=csv_alt_name, sr=csv_sr, sru=csv_sru, srl=csv_srl, sm=csv_sm, smu=csv_smu, sml=csv_sml, st=csv_st, stu=csv_stu, stl=csv_stl, dist=csv_dist)
                            dbcursor.execute(insert_target_stmt)
                            planets = [ p for (t,p) in self.csvplanets.keys() if t == target ]
                            for p in planets:
                                csv_planet_tuple = self.csvplanets[target, p]
                                csv_planet_list = list(csv_planet_tuple)
                                csv_planet_list = [ v if v != None else 'null' for v in csv_planet_list ]
                                csv_planet_tuple = tuple(csv_planet_list)
                                (csv_tname, csv_pname, csv_alt_name, csv_p, csv_pu, csv_pl, csv_pr, csv_pru, csv_prl, csv_pm, csv_pmu, csv_pml, csv_pmt, csv_pi, csv_piu, csv_pil, csv_pe, csv_peu, csv_pel, csv_tr, csv_t0, csv_t0u, csv_t0l) = csv_planet_tuple
                                if datasource == 'exofop':
                                    csv_tr = 1
                                if (csv_tname, csv_pname) not in self.excludeList:
                                    insert_planet_stmt = self.insert_planet_template.substitute(tname=csv_tname, pname=csv_pname, alt_name=csv_alt_name, p=csv_p, pu=csv_pu, pl=csv_pl, pr=csv_pr, pru=csv_pru, prl=csv_prl, pm=csv_pm, pmu=csv_pmu, pml=csv_pml, pmt=csv_pmt, pi=csv_pi, piu=csv_piu, pil=csv_pil, pe=csv_pe, peu=csv_peu, pel=csv_pel, tr=csv_tr, t0=csv_t0, t0u=csv_t0u, t0l=csv_t0l)
                                    dbcursor.execute(insert_planet_stmt)
                               
            dbconn.commit()
            self.empty_db = False
        except Exception as e:
            print(e)
            traceback.print_exc()

    def get_row(self, row, datasource, attrlist):
        result_row = []
        for dbattr in attrlist:
            if (dbattr, datasource) in self.dbcsvmap.keys() and self.dbcsvmap[(dbattr, datasource)] != None:
                dbattr_value = row[self.dbcsvmap[(dbattr, datasource)]]
                if dbattr_value == '' or dbattr_value == None:
                    dbattr_value = None
                elif dbattr not in ['tname', 'pname', 'tic_id', 'alt_name', 'pmass_type']:
                    dbattr_value = float(dbattr_value)
                elif dbattr == 'tname':
                    dbattr_value = dbattr_value.replace("'","`")
                elif dbattr == 'tic_id' and dbattr_value.find("TIC") != -1:
                    dbattr_value = dbattr_value.replace("TIC ", "")
                if datasource == 'exofop':
                    if 'lower' in dbattr and dbattr_value != None:
                        dbattr_value = -1 * dbattr_value
                result_row.append(dbattr_value)
            elif datasource == 'exofop' and dbattr == 'pmass_type':
                result_row.append('Prediction')
            else:
                result_row.append(None)       
        return result_row

    def read_csv(self, datasource, csvname):
        try:
            self.csvtargets = {}
            self.csvplanets = {}
            with open(csvname, newline='') as csvfile:
                reader = csv.DictReader(filter(lambda row: row[0]!='#', csvfile))
                _headers = reader.fieldnames
                for row in reader:
                    if datasource == "exofop" and row["TFOPWG Disposition"] in ["FP", "FA"]:
                        continue
                    target_row = self.get_row(row, datasource, self.dbattr_target)
                    (tname, tic_id, ant, sr, sru, srl, sm, smu, sml, st, stu, stl, dist) = tuple(target_row)
                    if datasource == "exofop":
                        tname = "TOI-" + tname[:tname.find('.')]
                    if tname not in self.csvtargets:
                        self.csvtargets[tname] = (tname, tic_id, ant, sr, sru, srl, sm, smu, sml, st, stu, stl, dist)
                    planet_row = self.get_row(row, datasource, self.dbattr_planet)
                    (_tname, pname, anp, p, pu, pl, pr, pru, prl, pm, pmu, pml, pmt, pi, piu, pil, pe, peu, pel, tr, t0, t0u, t0l) = tuple(planet_row)
                    if datasource == "exofop":
                        pname = pname[pname.find('.')+1:]
                    self.csvplanets[(tname, pname)] = (tname, pname, anp, p, pu, pl, pr, pru, prl, pm, pmu, pml, pmt, pi, piu, pil, pe, peu, pel, tr, t0, t0u, t0l)
                   
        except Exception as e:
            print(str(e))
            traceback.print_exc()
  
    # do a quick test to return list of tuples and later optimize to dictionaries?
    def read_adjustments(self, csvname):
        try:
            self.csv_adjustments = []
            with open(csvname, newline='') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    tname = row['tname'].strip()
                    pname = row['pname'].strip()
                    dbattr = row['dbattr'].strip()
                    value = row['value'].strip()
                    if value not in ["null", "Msin(i)/sin(i)"]:
                        value = float(value)
                    comment = (row['comment']).strip()
                    self.csv_adjustments.append( (tname, pname, dbattr, value, comment) )
        except Exception as e:
            print(str(e))
            traceback.print_exc()

    def read_addl_csv(self, csvname):
        try:
            addl_csv = []
            with open(csvname, newline='') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    tname = row['hostname'].strip()
                    tic_id = row['tic_id'].strip()
                    sr = self.float_val(row['st_rad'].strip())
                    sru = self.float_val(row['st_raderr1'].strip())
                    srl = self.float_val(row['st_raderr2'].strip())
                    sm = self.float_val(row['st_mass'].strip())
                    smu = self.float_val(row['st_masserr1'].strip())
                    sml = self.float_val(row['st_masserr2'].strip())
                    st = self.float_val(row['st_teff'].strip())
                    stu = self.float_val(row['st_tefferr1'].strip())
                    stl = self.float_val(row['st_tefferr2'].strip())
                    dist = self.float_val(row['sy_dist'].strip())
                    pname = row['pl_letter'].strip()
                    p = self.float_val(row['pl_orbper'].strip())
                    pu = self.float_val(row['pl_orbpererr1'].strip())
                    pl = self.float_val(row['pl_orbpererr2'].strip())
                    pr = self.float_val(row['pl_rade'].strip())
                    pru = self.float_val(row['pl_radeerr1'].strip())
                    prl = self.float_val(row['pl_radeerr2'].strip())
                    pm = self.float_val(row['pl_bmasse'].strip())
                    pmu = self.float_val(row['pl_bmasseerr1'].strip())
                    pml = self.float_val(row['pl_bmasseerr2'].strip())
                    pmt = row['pl_bmassprov'].strip()
                    pi = self.float_val(row['pl_orbincl'].strip())
                    piu = self.float_val(row['pl_orbinclerr1'].strip())
                    pil = self.float_val(row['pl_orbinclerr2'].strip())
                    pe = self.float_val(row['pl_orbeccen'].strip())
                    peu = self.float_val(row['pl_orbeccenerr1'].strip())
                    pel = self.float_val(row['pl_orbeccenerr2'].strip())
                    tr = row['tran_flag'].strip()
                    t0 = self.float_val(row['pl_tranmid'].strip())
                    t0u = self.float_val(row['pl_tranmiderr1'].strip())
                    t0l = self.float_val(row['pl_tranmiderr2'].strip())
                    addl_csv.append((tname, tic_id, sr, sru, srl, sm, smu, sml, st, stu, stl, dist, pname, p, pu, pl, pr, pru, prl, pm, pmu, pml, pmt, pi, piu, pil, pe, peu, pel, tr, t0, t0u, t0l))
        except Exception as e:
            print(str(e))
            traceback.print_exc()

        return addl_csv

    def float_val(self, val):
        if val != '':
            return float(val)
        
    def remove_target(self, target):
        del self.csvtargets[target]
        planets = [ (tname, pname) for (tname, pname) in self.csvplanets.keys() if tname == target ]
        self.remove_planets(planets)

    def remove_planets(self, planets):
        for (tname, pname) in planets:
            del self.csvplanets[(tname, pname)]
    
    def filter_data(self, dbcursor):
        invalid_targets = []
        for t in self.csvtargets.keys():
            (tname, tic_id, alt_name, sr, _sru, _srl, sm, _smu, _sml, st, _stu, _stl, _dist) = self.csvtargets[t]            
            if (sr == None or sm == None or sm > 10 or st == None or tic_id == None):
                invalid_targets.append(t)
        for i in invalid_targets:
            self.remove_target(i)
        invalid_planets = []
        for (tname, pname) in self.csvplanets.keys():
            (tname, pname, alt_name, p, _pu, _pl, pr, _pru, _prl, pm, _pmu, _pml, _pmt, _pi, _piu, _pil, _pe, _peu, _pel, _tr, _t0, _t0u, _t0l) = self.csvplanets[(tname, pname)]
            if p == None or p == 0 or (pr == None and pm == None):
                invalid_planets.append( (tname, pname) )
        self.remove_planets(invalid_planets)
        #single_planet_systems = []
        #for t in self.csvtargets.keys():
        #    if len([ pname for (tname, pname) in self.csvplanets.keys() if tname == t ]) < 2:
        #        single_planet_systems.append(t)
        #for s in single_planet_systems:
        #    self.remove_target(s)
        
    def target_in_db(self, dbcursor, tname):
        select_target_stmt = self.select_target_template.substitute(tname=tname)
        dbcursor.execute(select_target_stmt)
        return dbcursor.fetchone()

    def tic_id_in_db(self, dbcursor, tic_id):
        select_target_stmt = self.select_tic_id_template.substitute(tic_id=tic_id)
        dbcursor.execute(select_target_stmt)
        return dbcursor.fetchone()

    def alt_name_in_db(self, dbcursor, tic_id):
        select_target_stmt = self.select_alt_name_template.substitute(tic_id=tic_id)
        dbcursor.execute(select_target_stmt)
        return dbcursor.fetchone()

    def planet_in_db(self, dbcursor, tname, pname, csv_period, datasource):
        select_planet_stmt = self.select_planet_template.substitute(tname=tname,pname=pname)
        dbcursor.execute(select_planet_stmt)
        result = dbcursor.fetchone()            
        if result == None and "TOI-" in tname:
            select_planet_periods_stmt = self.select_planet_periods_template.substitute(tname=tname)
            dbcursor.execute(select_planet_periods_stmt)            
            periods = [ p for p in dbcursor.fetchall() ]
            period_found = [ p for p in periods if abs(p[0]-csv_period) < 0.1]
            return period_found[0][1] if len(period_found)==1 else None
        return result[1]  if result != None else None

    def adjust_csv(self, exoPlanetCSV2=None, exoPlanetCSV3=None):
        if exoPlanetCSV2 != None:
            tnames_unique = set([d[0] for d in self.csv_comppars])
            for tname in tnames_unique:
                if tname in self.csvtargets:
                    rows = [d for d in self.csv_comppars if d[0] == tname]
                    row = rows[0]
                    target_list = list(self.csvtargets[tname])
                    vc = 1
                    for v in range(len(target_list)):
                        if v in [0, 2]:
                            pass
                        else:
                            if target_list[v] == None or target_list[v] == "null":
                                if row[vc] != None and row[vc] != "null" and row[vc] != "":
                                    target_list[v] = row[vc]
                            vc += 1
                    for r in rows:
                        pname = r[12]
                        if (tname, pname) in self.csvplanets:
                            planet_list = list(self.csvplanets[tname,pname])
                            vc = 0
                            for v in range(len(planet_list)):
                                if v in [0, 1, 2]:
                                    continue
                                elif v in [6, 7, 8, 9, 10, 11, 12]:
                                    pass
                                else:
                                    if planet_list[v] == None or planet_list[v] == "null":
                                        if r[vc+13] != None and r[vc+13] != "null" and row[vc] != "":
                                            planet_list[v] = r[vc+13]
                                vc += 1
                            self.csvplanets[tname, pname] = tuple(planet_list)
                    self.csvtargets[tname] = tuple(target_list)
        if exoPlanetCSV3 != None:
            tnames_unique = set([d[0] for d in self.csv_toi])
            for tname in tnames_unique:
                if tname in self.csvtargets:
                    rows = [d for d in self.csv_toi if d[0] == tname]
                    row = rows[0]
                    target_list = list(self.csvtargets[tname])
                    vc = 1
                    for v in range(len(target_list)):
                        if v in [0, 2]:
                            pass
                        else:
                            if target_list[v] == None or target_list[v] == "null":
                                if row[vc] != None and row[vc] != "null" and row[vc] != "":
                                    target_list[v] = row[vc]
                            vc += 1
                    for r in rows:
                        pname = r[12]
                        if (tname, pname) in self.csvplanets:
                            planet_list = list(self.csvplanets[tname,pname])
                            vc = 0
                            for v in range(len(planet_list)):
                                if v in [0, 1, 2]:
                                    continue
                                elif v in [6, 7, 8, 9, 10, 11, 12]:
                                    pass
                                else:
                                    if planet_list[v] == None or planet_list[v] == "null":
                                        if r[vc+13] != None and r[vc+13] != "null" and row[vc] != "":
                                            planet_list[v] = r[vc+13]
                                vc += 1
                            self.csvplanets[tname, pname] = tuple(planet_list)
                    self.csvtargets[tname] = tuple(target_list)
        tnames_unique = set([tname for (tname, pname, dbattr, value, comment) in self.csv_adjustments])
        for tname in tnames_unique:
            if tname in self.csvtargets:
                target_list = list(self.csvtargets[tname])
                target_adjs = [ (t,p,a,v,c) for (t,p,a,v,c) in self.csv_adjustments if t == tname]
                for (t,p,a,v,c) in target_adjs:
                    if p != '':
                        if (t,p) in self.csvplanets:
                            planet_list = list(self.csvplanets[t,p])
                            planet_list[self.dbattr_planet.index(a)] = v
                            self.csvplanets[t,p] = tuple(planet_list)
                    else:
                        target_list[self.dbattr_target.index(a)] = v

                self.csvtargets[tname] = tuple(target_list)
                
DBarchive(sys.argv)
